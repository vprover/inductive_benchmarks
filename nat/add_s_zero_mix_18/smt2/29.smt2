(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat)) (= (add (s (add (add (s v1) v2) (add (s v9) (add v9 (add v7 (add v4 (s v0))))))) (add (add (s (s (add (s v8) v5))) v3) v6)) (add (add (add v1 (add (add v8 (add (s v6) (s (add (s v3) (s (s (add (add v9 (s (s (add v4 v7)))) v9))))))) v5)) v0) v2)))))
(check-sat)
