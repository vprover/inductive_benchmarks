#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((add (add (add v6 (add v3 (S(v1)))) (add (S((S((add (S(v0)) (add (S(v5)) v2)))))) (S(v4)))) (S((S((S((S(v7))))))))) = (S((add (S((S((add (add v6 v7) (S((S((S((S((S((S((add (add v2 v0) v1)))))))))))))))))) (add (S(v4)) (add v3 v5))))))             ) [@@auto]
;;
