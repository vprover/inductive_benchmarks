#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((S((add (S((add (add v4 (add v5 (S(v3)))) (add v7 (add (add v2 (S(v1))) v0))))) (add (add (S((S(v1)))) (add (S(Zero)) v6)) v4)))) = (S((add (add (add v4 v1) Zero) (add (add (S((S((add (S((add (S((S((add v6 (S(v3))))))) v0))) v7))))) (add v1 v5)) (add v2 v4))))))             ) [@@auto]
;;
