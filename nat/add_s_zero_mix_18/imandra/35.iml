#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (S((add (add v1 (S(v3))) (add Zero (add v0 (add v7 (S(Zero)))))))) (add v6 (S((S((add (add (add v4 (add v5 (S(v2)))) v0) v8))))))) = (S((S((S((add (add v2 (add (add (add v8 (add v7 v0)) v5) (S((add v0 (add Zero v3)))))) (add v1 (add Zero (S((add (S(v4)) v6)))))))))))))             ) [@@auto]
;;
