#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 -> ((add (add (S((add v3 (add (add v0 (S((S(Zero))))) (S((add (S(v2)) (S(v4))))))))) (S((add (S(Zero)) (S(v1)))))) (S(v5))) = (add (S((S((S((add Zero (S(v4))))))))) (S((S((add (add v0 v2) (add (S((S((add v5 (S(v1))))))) (add v3 (S(Zero)))))))))))             ) [@@auto]
;;
