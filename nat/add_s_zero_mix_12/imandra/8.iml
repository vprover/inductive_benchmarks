#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 -> ((S((add (add (add Zero (S(v0))) (add v2 (S(v1)))) (S((S((S((S(v3))))))))))) = (S((add (add (add (S(v2)) (S(v0))) (S((S((S((add v1 Zero)))))))) (S(v3))))))             ) [@@auto]
;;
