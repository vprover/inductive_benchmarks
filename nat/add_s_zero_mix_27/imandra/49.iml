#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((S((S((S((add (add (add (add v0 (S((add v6 (S((S((S(v2)))))))))) (add (S(v3)) (S(v1)))) (add (add (S(v7)) v8) (S((S((S((S((add v5 (S(v4))))))))))))) (S((S(v9))))))))))) = (S((add v1 (S((add (add (S((S((S(v5)))))) (add (S((S(v7)))) v3)) (S((add (add v9 (S((S((add (add (S(v2)) (S((add v4 v8)))) (S((S((S(v6)))))))))))) (S((S(v0))))))))))))))             ) [@@auto]
;;
