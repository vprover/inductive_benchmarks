#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((S((add (add (add (add (S(v7)) (S(v4))) (add (S((add v0 (S((S(v9))))))) (S(v1)))) (S((add (add (S((S((add (S(v6)) (S(v5))))))) v2) (S(v0)))))) (add (S(v7)) (add (S(v3)) v8))))) = (S((add v5 (S((add (S((S((add (add v6 (add v2 (S(v1)))) (add (S((add (S((S(v7)))) (add v0 (S((S((S((S((S(v9)))))))))))))) v0)))))) (S((add (add (add v8 v3) v4) (S(v7))))))))))))             ) [@@auto]
;;
