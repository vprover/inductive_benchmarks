#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (S((add v5 (S((add v4 (S((S(v6)))))))))) (S((add (add (add v1 (S((S(v3))))) (S((add (S((S(v8)))) (add (S((S(v8)))) v0))))) (S((add (add (S(v7)) (S(v5))) (S(v2))))))))) = (add (S((S((add (S((add (add (add (add v5 (add (S((add (S(v0)) v7))) (S((S((add (S((S(v5)))) (S(v3))))))))) (S((S((S(v1))))))) v8) v4))) (S((S(v6))))))))) (add v2 (S(v8)))))             ) [@@auto]
;;
