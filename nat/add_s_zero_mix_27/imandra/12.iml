#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((S((S((S((add (S((S((S((add (add (add (S(v9)) v8) (add (S(v3)) (add (S(v4)) (S((S((add v5 (S(v7)))))))))) (add (add (S(v6)) v2) v0)))))))) (S((S((add (S(v1)) v8)))))))))))) = (add (S((S((add (add (add (S((S((S(v4)))))) (S((S(v8))))) v7) v0))))) (add (S((S((add (add v5 v3) (add v2 (add v6 (S((S(v1))))))))))) (S((add v8 (S((S((S((S(v9))))))))))))))             ) [@@auto]
;;
