#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((S((S((S((add (add (S((S((S((add (add (add v0 (S((S(v5))))) (S(v2))) (S((add (add (S(v4)) (S(v3))) (S(v3)))))))))))) (S(v7))) (S((add (add (S(v7)) v1) (S(v6)))))))))))) = (add (add (S((S((add (S((add (S((S((add (add (S((S((S((add v6 (S((S(v7))))))))))) (S((add (S((S(v7)))) (S(v4)))))) (S(v1))))))) (add (S(v3)) v0)))) v3))))) (S(v2))) v5))             ) [@@auto]
;;
