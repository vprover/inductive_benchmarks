#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (S((add (S(v5)) (add (add (S((add (add (S(v8)) (S(v2))) (add (S(v7)) (add v6 (S(v1))))))) (add (S(v0)) v4)) (S((S(v0)))))))) (S((S((add (S(v4)) (S((S((S(v3)))))))))))) = (add v3 (add (add (add (add v4 (add (S((S(v0)))) (S((S((S((S((S((S(v4)))))))))))))) v8) v2) (add v1 (add (add (add (S((S((S((S((S(v7)))))))))) (S(v5))) (S(v0))) (S(v6)))))))             ) [@@auto]
;;
