#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (add (add (add (add (add (S(v2)) v7) Zero) (S(v9))) (S(v8))) (S(v5))) (add (S((S((S(v3)))))) (add (add (S(v9)) (S((S((add v6 (S((S(v1)))))))))) (S((add (S((S(v4)))) v0)))))) = (S((add (S((add (add v9 (S((add (add v6 (S(v9))) (S((add v0 (add (S((add (add (S(v5)) (S((S((S((S(v8))))))))) v3))) (add (S((add (S((S(v1)))) Zero))) (S(v2))))))))))) v7))) v4))))             ) [@@auto]
;;
