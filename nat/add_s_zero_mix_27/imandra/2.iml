#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((S((S((add (add (S((S((S((S(v6)))))))) (add (S((add (add v1 (S(v4))) (S((S(v8))))))) v7)) (add (S((add v5 (add v3 (add (add (S(v5)) v0) (S(v9))))))) (add (S(v0)) (S(v2))))))))) = (S((add (S(v6)) (add (S((S((S((add (add (S(v4)) (add (S((add (S(v2)) v3))) v9)) v7))))))) (add (S((add v1 (S((add (S((add (S(v8)) (S(v5))))) v5)))))) (add (S((S(v0)))) v0)))))))             ) [@@auto]
;;
