#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 -> ((add (add (add (S(v4)) (add (S(v5)) v8)) (S((add (S(v10)) (S((add (add (S(v1)) v11) v9))))))) (add (S((add (S(v7)) (add v0 (add v2 (S(v3))))))) (add (S(v10)) (S((add v6 (S((S(v12)))))))))) = (S((S((add (S(v9)) (add (add (add (S((S((S(v3)))))) (add v4 (add (add (S(v10)) (add (add (add (add (S((S(v5)))) v0) (add (S((add v11 (S(v12))))) (S(v7)))) v1) v8)) v10))) v6) (S(v2)))))))))             ) [@@auto]
;;
