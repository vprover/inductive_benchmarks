#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((S((S((S((add (add (add (S((add (add (S((add (S(v0)) v3))) (S(v5))) v2))) (S((S((S(v5))))))) (add v2 (add (S(v4)) v7))) (add (S(v1)) (add (S((S(v2)))) (add v3 (S(v6)))))))))))) = (S((add (add (add (add (add v3 v0) (S(v2))) (S(v2))) (S((add v4 (S((S(v5)))))))) (S((S((S((add (add (add (add v2 (S(v6))) (add v1 v7)) v3) (S((S((S((S((S(v5)))))))))))))))))))))             ) [@@auto]
;;
