#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((add (S((S((S((S((add (S((S((add v5 (S((S(v5))))))))) (S((S((add (add (S(v2)) (add (add (S(v7)) (S(v4))) v6)) (S(v5)))))))))))))))) (S((add (S(v0)) (add (S(v1)) v3))))) = (S((S((S((add v3 (S((add (add (S((S((add (add v5 (S(v5))) v6))))) (S((S((add (add (S(v7)) (S((add v4 (S(v2)))))) v0)))))) (S((add (S((S((S((S(v1)))))))) v5))))))))))))))             ) [@@auto]
;;
