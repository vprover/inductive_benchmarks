#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((add (add (S((S((S(v7)))))) (S((add (add (add (S(v2)) v5) (S(v6))) (S((S((add (add (S(v0)) v4) Zero))))))))) (add (S((S(v1)))) (add (S((S(v0)))) (S((S((S((S(v3))))))))))) = (S((add (add (S((add (S(v2)) (add (S((S(v0)))) (S((S((add v3 (add v0 v4)))))))))) (add (S((S(Zero)))) (S((add (S(v6)) (add (S(v7)) v5)))))) (S((S((S((S((S(v1))))))))))))))             ) [@@auto]
;;
