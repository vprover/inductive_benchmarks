data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (add (add (add (add (s (add (add (add (s (s zero)) V6) (add (s V2) (s zero))) (s (s (s V7))))) (s (s (add V5 (s V3))))) (s V4)) (add (s V6) (s V5))) (add V1 (s V0))) = (s (add (add V3 (add (add (add V6 (s (s V7))) (s (add (s V1) (add V5 V0)))) (s (s zero)))) (add zero (s (add (s V6) (s (add (s (s V4)) (add V5 (s (s (s V2))))))))))))))))))).
