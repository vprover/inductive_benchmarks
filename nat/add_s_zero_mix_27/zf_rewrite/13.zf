data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (add (s (s (s (s (add V6 (s (add (s V0) (add (add (add (s V0) (s (s V3))) (add V1 (s V7))) (s zero))))))))) (s (s (add (add (s (s V0)) V4) (add V2 (s V5)))))) = (add (add (add (s (s (s V5))) (s (add (add (s V1) (add (s (add V0 V4)) V3)) (s (s (s (add (s zero) (add (add (s V7) V2) (s V0))))))))) (s (s (s (s V6))))) V0))))))))).
