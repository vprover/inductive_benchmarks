data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (add (s (s (add (s (s (s (add (s V6) (s (add (add (s (s V3)) (s V2)) V4)))))) (add (s (add V7 (s (s (s V0))))) (s V1))))) (add (add V9 (add (s V8) V5)) V3)) = (add (add (add (s (add (s (s (s (s (s (add V2 (s V9))))))) (s (add V7 (add (s (s (s (add V0 V3)))) (s (s V1))))))) (s V4)) (add V8 V3)) (s (add V6 (s V5)))))))))))))).
