data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (forall(V10:nat). (forall(V11:nat). (s (s (add (s (add (add (s (add (add (add (s V0) V1) V8) (s (add (s V11) V9)))) (add (s V6) V1)) (add (add (add (s V8) (s V10)) (add (s V4) V2)) (add V3 (s V7))))) (s V5)))) = (s (add (add (s (s (add V2 (s (s (s (add (add (add (add V1 (s (s (add V7 V6)))) V8) (add (s (s (add V4 V1))) (s (add V8 (add V3 (add (s (s V9)) V10)))))) V11))))))) V5) V0)))))))))))))).
