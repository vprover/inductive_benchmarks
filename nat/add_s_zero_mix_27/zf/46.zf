data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (forall(V10:nat). (forall(V11:nat). (add (s (add (add (s V7) V10) (s (add (s V1) (s (s V4)))))) (add (s V9) (add (s V6) (s (add (s (s (s (add (add V2 (add (s V5) V8)) V3)))) (add (add V1 (s V0)) V11)))))) = (s (s (add V8 (add (s (s (add (s (s (s (add V5 V6)))) (add (s (s V9)) (add (add (s (add (s (add V1 V1)) V0)) (add V2 V4)) (add (s (s V11)) (s V10))))))) (add V3 V7))))))))))))))))).
