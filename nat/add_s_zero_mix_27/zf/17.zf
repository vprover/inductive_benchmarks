data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (add (s (add (s V6) V5)) (s (add (s (s V4)) (s (s (add (add (s V2) (s (s (s (add (s V1) (s (s (s (s zero))))))))) (add (add V7 (s V0)) (s V3)))))))) = (s (s (s (add (s V2) (add (add (add (s (s (s (add (add (s V3) (s (s (s V5)))) (s (s (add (add (s V4) V1) (s (s V6))))))))) V7) (s zero)) (s V0)))))))))))))).
