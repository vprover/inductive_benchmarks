data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (s (add (s (add (add (s (s V6)) V4) (add (add (s V8) (add V0 (s V1))) V2))) (s (s (add (s (s (add (s V5) (s (s (s V3)))))) (s (add (s V7) (s V9)))))))) = (s (add (s (s (add (add (s (add (s (s (s V7))) (s (s (s (s (add (add V3 (s V8)) (s V4)))))))) (s (add (add V6 (s (s V5))) (add V0 V1)))) V2))) (s V9))))))))))))).
