#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 -> ((S((add (S((S((add (add (add (S(v0)) v11) (add (S((S((S(v3)))))) (S(v2)))) (add (S(v8)) (add (add (add v1 (add (S(v5)) v7)) (S(v4))) (S((S(v6))))))))))) (S((S((S((add (S(v10)) (S(v9)))))))))))) = (S((S((add (add (add (S((S((S(v3)))))) (S((add (add v8 (add (add (add v6 v9) (S((S((S((S(v10))))))))) v1)) v7)))) (S(v5))) (add (S((S((add (S((S((S((S(v11)))))))) (S(v0))))))) (add v4 v2))))))))             ) [@@auto]
;;
