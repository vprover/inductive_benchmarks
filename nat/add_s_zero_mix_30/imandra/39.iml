#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 -> ((add (S((S((add (S((S((S((S(v4)))))))) (S((add (S(v5)) v6)))))))) (add (add (add (add v11 (S(v8))) (S((add (add v7 (S(v11))) v1)))) (add (S((S(v1)))) v10)) (add (S((add v9 (add v3 (S(v2)))))) (S(v0))))) = (add (add (add (add (add (S((add v4 (S((S((S(v7))))))))) (S((S(v5))))) (S((add v1 (S((add (S(v6)) v8))))))) (add v1 (add (S(v11)) (add v11 (S((S(v0)))))))) (add v10 (S((S((S(v9)))))))) (add v2 (S(v3)))))             ) [@@auto]
;;
