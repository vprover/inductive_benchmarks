#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((S((S((S((add (add (S((add (S(Zero)) (add (S(v1)) (S((add (add (S(v6)) (S(v4))) (S((add (add v8 (S(v7))) (add (S((S(v5)))) (S(v6))))))))))))) (add v6 (add (S((S(v2)))) v4))) (add v3 (S(v0)))))))))) = (add (S((add (add (S((add v6 (S((add v8 (add (S((S((add (S((S(v4)))) (add (S(v6)) (S(Zero)))))))) v6))))))) v4) (add (S((S((add v2 v7))))) (S((S((S((S((add (S(v3)) (S(v0))))))))))))))) (add v1 v5)))             ) [@@auto]
;;
