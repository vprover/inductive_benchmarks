#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 -> ((add (S((S((add (add v1 (S((S((S((add (S((add v7 (S(v0))))) (add (S((S(v10)))) v9))))))))) (S((S((add (S(v5)) (S((S(v2)))))))))))))) (S((add (add (S(v3)) (S(v8))) (S((add v6 (S(v4))))))))) = (add (S((S((add v3 (add (S((add v10 (S((add (S((add v7 (add v5 (S((S((S((S((S((S(v4)))))))))))))))) v6)))))) (add (S(v2)) (S((S(v8))))))))))) (add (S((S((add (S(v1)) (S((S(v9))))))))) v0)))             ) [@@auto]
;;
