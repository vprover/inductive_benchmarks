#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (S((S((add (S(v7)) (add (S((S(v4)))) (S((S((S(v7)))))))))))) (add (add v1 (S((S((add (S((add (add (S((add (S(Zero)) v0))) (S(v5))) (S((S(v3))))))) (add v6 (S(v8))))))))) (S((S(v2)))))) = (add (S((S((S(v1)))))) (add (add (S((S((S((S((S((S(v5)))))))))))) (S(v3))) (add (S((S((add (S((S((S(v0)))))) (S((S((S((add Zero (add (S(v7)) (add (add v2 v7) v4)))))))))))))) (add v6 v8)))))             ) [@@auto]
;;
