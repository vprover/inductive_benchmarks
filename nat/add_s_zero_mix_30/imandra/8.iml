#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 -> ((S((S((S((S((add (add (S((S((S(v1)))))) (add (add (S((S((S((S(v3)))))))) (S(v2))) (S((S((S((S(Zero)))))))))) (add (S((S((S((add v1 (S(v0))))))))) (S((add v4 (S(Zero))))))))))))))) = (S((S((S((S((S((add (S((add v3 (S((add (add (S((add (S(v1)) (S((S(v4))))))) (S((add (S((S(v1)))) (S((S((S((S((add v2 v0))))))))))))) (S((S((S(Zero)))))))))))) (S(Zero))))))))))))))             ) [@@auto]
;;
