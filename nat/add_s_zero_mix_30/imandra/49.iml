#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (S((add (S((S(v1)))) (S((S((add (S((add v3 (S((S((S(v6))))))))) v0)))))))) (add (add (add v6 (S(v7))) (S((S(v9))))) (S((add (S((add (S(v8)) (S(v4))))) (add (S(v2)) (S((S(v5)))))))))) = (add (S((S((S((S(v5)))))))) (add (add (add (add (S(v9)) v7) (add (add (S((S(v3)))) (S((add (S(v6)) v2)))) (S((S((S((S((add (add v0 (S((S((S(v4))))))) v6))))))))))) (S((S((S(v1))))))) v8)))             ) [@@auto]
;;
