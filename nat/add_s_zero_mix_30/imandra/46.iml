#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (add (S((S(v9)))) (S(v5))) (S((S((add (add (add (S((add (S(v3)) (S(v4))))) (S((S(v8))))) (S((S((add (S(v7)) (add (add Zero (S(v7))) (S(v0))))))))) (add v6 (add (S(v1)) (S((S(v2)))))))))))) = (S((add v3 (S((S((add (S(v6)) (add (S((add v7 (add v2 (S((S((S((S(v4)))))))))))) (S((S((S((add (S(v9)) (S((add (add v0 v5) (add (S(v8)) (add (S((add (S(v1)) v7))) (S(Zero))))))))))))))))))))))))             ) [@@auto]
;;
