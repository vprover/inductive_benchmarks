#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((S((add (add (S((S(v7)))) (S(v1))) (S((add (S((S((S((S((add (S((S((S(v5)))))) v3))))))))) (add (S((S(v0)))) (S((add (add (add (S(v3)) v8) (S(v4))) (add (S((S(v2)))) (S(v6))))))))))))) = (add (S(v3)) (S((add (add (add (S((S((add (add (add (S((S(v0)))) (add (S(v7)) (S((S(v1)))))) (S(v6))) (S((S((S((S(v2))))))))))))) (S((add (S(v4)) v8)))) (S((S((S((S(v3))))))))) v5)))))             ) [@@auto]
;;
