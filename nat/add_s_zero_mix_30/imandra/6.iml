#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (S((add (S((S((add (add v8 (S(v6))) (S((add (add (S(v1)) v5) (add (S((add (add (S((S((S(v8)))))) (S((S(v9))))) (S((S(v3))))))) (add (add (S(v4)) v7) (S(v2)))))))))))) Zero))) (S((S(v0))))) = (add (add (S((add (S(v1)) (S((add (S(v8)) (S((S((add (S((S((S(v3)))))) (add (S((add (S(v6)) (S((add (add (S((S(Zero)))) v8) (S(v0)))))))) v5)))))))))))) (S((S((add v2 (add v9 v4))))))) (S(v7))))             ) [@@auto]
;;
