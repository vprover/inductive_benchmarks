#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (S((add Zero (add (S(v7)) (add (S((add v2 (S(v6))))) (add v0 (S(Zero)))))))) (S((add (add (S(v1)) (add (S((S((S((S((add (S(v8)) v9))))))))) (S((add v3 (S((S((S((S(v5))))))))))))) (S(v4)))))) = (S((S((S((add (add (S((add (S(v1)) (S((add v8 (S((add (S((S((S(v3)))))) (S((add v9 (S(v7)))))))))))))) (add (add (add v6 (S((add Zero (add v4 v2))))) (S((S((S((S(v0))))))))) v5)) (S(Zero))))))))))             ) [@@auto]
;;
