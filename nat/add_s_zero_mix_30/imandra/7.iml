#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 -> ((add (add (S((S((S(v7)))))) (add (S((add (add (S(v4)) (S((S(v8))))) (add (add (S(v5)) v9) (add (S((add (S(v2)) v2))) (S((S(v0))))))))) (S((add v6 (S(v1))))))) (S((add (add (S(v11)) v3) (S(v10)))))) = (add v1 (S((add (S((add (add (add (S((add v4 (add (add (S((S(v3)))) v10) (S((S(v2)))))))) v0) (add (add v6 (add (S((S(v8)))) (S((S((S((add v9 (S(v2))))))))))) (S((S(v7)))))) v5))) (S((S(v11)))))))))             ) [@@auto]
;;
