#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((S((S((add (add (S((add (S((S((S((add (S(v4)) v7))))))) (S((add (S((S(v1)))) (add (S((S((S(v3)))))) (S(Zero))))))))) (S((S(v6))))) (S((add (add v2 (S(v0))) (S((S((S(v5)))))))))))))) = (S((S((S((S((add (S((add (add v0 v2) (S((add (S(Zero)) (S((add (S((S((S((S(v4)))))))) (add (S((S(v7)))) v1)))))))))) (add v3 (S((S((add (S((S((S((S(v5)))))))) (S(v6))))))))))))))))))             ) [@@auto]
;;
