#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((S((add (add (add (S(v5)) v0) (S((S(v7))))) (add (add (S((S((add v4 (S(v6))))))) (add (S((S(v1)))) (S((add (add (add (add (S(v2)) v9) (S(v8))) Zero) (S((S(v3))))))))) (S((add (S(Zero)) (S(v0))))))))) = (add (S((add (S((add Zero (S((S(v0))))))) v6))) (S((S((add (add (add (S((add v0 (S((add (S((S((add v5 Zero))))) (S(v8)))))))) v3) (S((add (S((add (S(v1)) (add (S(v4)) v9)))) v2)))) (S((S(v7)))))))))))             ) [@@auto]
;;
