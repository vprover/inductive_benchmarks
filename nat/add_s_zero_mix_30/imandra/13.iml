#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (add (S(v5)) (add (S(v3)) (S((S((S(v1)))))))) (add (S((S((S((S((S((add (S((add (add (S(v6)) (S(v8))) (S(v2))))) v4))))))))))) (S((add (S((S(v0)))) (S((S((add v7 (S(v5)))))))))))) = (add (add (add (S(v4)) v6) v3) (add (S((S((S((add (S((S((S((add v8 (S((S(v5))))))))))) v2))))))) (S((add v1 (S((add (S((add (S((S((S((S(v7)))))))) (S((S(v0))))))) (S((S(v5)))))))))))))             ) [@@auto]
;;
