#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (add (add (add (add v7 (S((S((S((add v0 (S(v2)))))))))) v8) (add (add (add v3 (add (S(v5)) (S(v0)))) (S((S(v9))))) (S(v4)))) (add (add (S(v3)) v1) v6)) (add (S((S((S((add Zero (S(v4))))))))) (S(v9)))) = (add (add (add v3 (S((add v4 (S((add (add v9 v0) (add (add (add v7 (add (S(v5)) (S(v0)))) (S((S(v1))))) (S((S((add (add v6 (S(v3))) (S((add v8 (S((add v9 Zero))))))))))))))))))) (S((S((S(v2))))))) (S(v4))))             ) [@@auto]
;;
