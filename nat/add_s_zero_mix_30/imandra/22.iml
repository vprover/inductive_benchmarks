#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (S((S((add (S((S((add (S((add (add v1 (S(v4))) v3))) (S(v8))))))) v5))))) (S((add (S((add v9 (S((add v8 (add (S((S(v2)))) (add v0 (S((S(v9)))))))))))) (S((add (S((S(v7)))) (S(v6))))))))) = (S((add (add (S(v0)) (S((S((S(v1))))))) (S((add (add (add v4 (add (S((add (add v9 v5) v8))) (S(v9)))) v3) (S((add (S((S((S((S(v8)))))))) (S((add (S((add (S((S(v6)))) v7))) (S(v2)))))))))))))))             ) [@@auto]
;;
