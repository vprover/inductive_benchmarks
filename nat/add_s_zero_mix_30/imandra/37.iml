#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (add (add (S((S((S((S((add v6 (S(v7))))))))))) (S((S(v0))))) (S((S((S((S(v5))))))))) (S((add (add (S(v3)) (S((add (S(v9)) v1)))) (add (add (S((S(v6)))) (S(v8))) (add (S(v2)) v4)))))) = (S((add (S((add (S(v1)) (S((S((S((S((S(v9))))))))))))) (S((add (S((S((S((add (add v6 v5) v7))))))) (add (add (add (S((S(v2)))) (S((add (S(v3)) v8)))) (S((S((add v0 (S(v4)))))))) v6))))))))             ) [@@auto]
;;
