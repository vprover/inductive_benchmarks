#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (S((S((S(v7)))))) (add (add v6 (S((S((add (S(v4)) (S(v5)))))))) (add (S(v8)) (S((S((add (add (add v3 (add (S(v7)) v1)) (S((S(Zero))))) (S((S((add v9 (S((add (S(v2)) (S(v0)))))))))))))))))) = (add (add (add (S((S((add (add v4 (add (add (S(v7)) v1) v7)) (S((S((S((S((S((add (S(v8)) (S((S((S(v9)))))))))))))))))))))) v0) v2) (add (S(v5)) (add (S((S((add Zero (S((S((S(v3))))))))))) v6))))             ) [@@auto]
;;
