#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (S((add (add (add (add (S(v3)) (add (S((S(v0)))) (S(v5)))) (add (add (add v7 (S((S(v4))))) v6) (S((S(v2)))))) (S((S(v7))))) (S(v1))))) (add (S((S(v9)))) (S((add (S((S(v1)))) (S(v8))))))) = (S((add (S(v9)) (add (S((add v2 (S((add (add (S(v3)) (add v7 (S((S((S(v4)))))))) (add (add (add v7 (S(v6))) (S((S(v1))))) v1))))))) (S((S((add v8 (S((add (S((S(v5)))) (S((S(v0)))))))))))))))))             ) [@@auto]
;;
