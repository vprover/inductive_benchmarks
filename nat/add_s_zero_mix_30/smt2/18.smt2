(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat)) (= (add (s (s (s (add (add (s v7) (s (add v0 (add (s v1) v5)))) v8)))) (add (s (s (s (s (s v6))))) (s (add (add (s (add (s v3) v4)) (s zero)) (s (add (s (s v2)) (s v4))))))) (add (s (add (s (s (add v4 v1))) (s (s (s (s (add v2 (s (add (s (add (s (s (add (s (add (s v4) v6)) (s v8)))) (add (s v7) (s (add v5 (s (s zero))))))) v3))))))))) (s v0))))))
(check-sat)
