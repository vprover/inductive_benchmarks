data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (forall(V10:nat). (forall(V11:nat). (add (s (s V3)) (add (add (add (s V0) (add (s V9) V4)) (add (add (s V11) (s V1)) (s (add V2 (s V9))))) (s (s (add (add (add V7 (s V8)) (s (add V2 (s (s (s V5)))))) (add (s V10) V6)))))) = (s (add (s (s (add (add V11 (add V0 (s (s V3)))) (add (s (add V7 (add V5 (s (add (add V2 V10) (s (s V9))))))) V9)))) (s (add (s (add (s V1) (add V2 (s V8)))) (s (add V6 (s (s V4)))))))))))))))))))).
