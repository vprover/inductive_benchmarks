data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (s (add (s (add (s (s (add (s V1) (add (s (s (add (s (s V4)) (s (s V7))))) (s V5))))) (add (s V6) V0))) (s (s (add (s (s (s (s (s V2))))) (add V2 (s V3))))))) = (add (add (s (s (s (s (s V7))))) (add V5 (s (add (add (add (s (s (s (s (s (s V3)))))) (s (s V4))) V6) (s V2))))) (s (s (add V1 (add (s (s (s V2))) (s V0)))))))))))))).
