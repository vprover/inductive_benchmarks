data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (add (s (s (add (s (s (add (s (add (add V1 (s V4)) V3)) (s V8)))) V5))) (s (add (s (add V9 (s (add V8 (add (s (s V2)) (add V0 (s (s V9)))))))) (s (add (s (s V7)) (s V6)))))) = (s (add (add (s V0) (s (s (s V1)))) (s (add (add (add V4 (add (s (add (add V9 V5) V8)) (s V9))) V3) (s (add (s (s (s (s V8)))) (s (add (s (add (s (s V6)) V7)) (s V2))))))))))))))))))).
