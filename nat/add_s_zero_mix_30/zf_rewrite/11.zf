data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (forall(V10:nat). (add (add (s V0) (s (add (s (add (s (add (s V10) (add (s (s V2)) V7))) (add (s (s (s V6))) V4))) (s (s (s (s (s V3)))))))) (add (s (s (add V5 (s V9)))) (add (s V8) V1))) = (add (s (s (s (add (add V4 V0) (s (s V1)))))) (s (s (add (s (s (add (s (add V2 V6)) (add (s (s (s (s V3)))) (s V5))))) (add (s V7) (s (s (add (s V9) (add V10 V8)))))))))))))))))))).
