data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (forall(V10:nat). (forall(V11:nat). (s (s (s (s (add (add (s V7) V10) (add (add (s V1) (s (s (add (s (s (add (s V6) (add (s (s V5)) V3)))) (add (s V8) (add (s (add V2 (s V11))) V0)))))) (add V6 (add (s V9) V4)))))))) = (add (add (add (s (s (s (s V3)))) V1) V6) (s (add (s (s (add (add V5 (s (s (add (add (add (s V6) V0) (s (add (s V11) V4))) (s V8))))) (s (s (add V10 (s (add (s V9) V7)))))))) V2))))))))))))))).
