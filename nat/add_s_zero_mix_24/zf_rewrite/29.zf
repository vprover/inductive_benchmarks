data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (add (add V3 (s (s (s V7)))) (add (add (add (add V3 (s V4)) (s (add (s V0) V0))) (add (s (add V1 (s (s (s V6))))) V4)) (s (add (s V5) (s V2))))) = (add (add (s (s V5)) (s V1)) (add (s (s (add (add (s V4) V0) (add V0 V7)))) (s (s (add V4 (s (add V6 (add V2 (s (s (add (s V3) (s V3)))))))))))))))))))).
