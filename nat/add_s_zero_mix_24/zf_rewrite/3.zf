data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (s (s (add (add (s (add (s V6) V4)) (add (add (s V8) V3) (s (add (s V0) (s V0))))) (add V1 (add V2 (s (s (add V5 (add (s V1) (add V7 (s zero))))))))))) = (add (add (add (add V5 (s (s zero))) (s V2)) (add (add (s (add (s V8) V0)) (s V4)) (add (s (add (s (s V6)) V1)) (s (add (s (add V1 V7)) V3))))) (s V0))))))))))).
