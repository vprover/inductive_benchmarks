(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat)) (= (add (s (add (s (add v5 (add (s v1) (s (s v7))))) (add v4 (s (s (add v6 (s (s v3)))))))) (s (add (s (add (s (s v8)) (s v0))) (s v2)))) (s (add v8 (s (s (s (s (add v5 (s (add v3 (add v6 (add (add (s (s (add (s v2) (s (s (add (s (s v4)) v0)))))) v7) (s (s v1)))))))))))))))))
(check-sat)
