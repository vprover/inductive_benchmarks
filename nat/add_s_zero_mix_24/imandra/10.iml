#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((add (S((add (S((S((S((add (S(v3)) (add (S((add (S(v7)) (S(v2))))) (S(v4)))))))))) (S((add (S(v5)) (S((S(v5)))))))))) (add (S((add v6 (S(v0))))) v1)) = (S((S((S((S((add (add (S((add (add (S((S(v1)))) (add v7 v4)) (S(v6))))) v0) (add (S((add v5 v3))) (S((add (S((S((S((S((S(v5)))))))))) v2))))))))))))))             ) [@@auto]
;;
