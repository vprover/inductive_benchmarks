#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (add (add (add (S(v2)) v1) (S((S(v5))))) v0) (add (add (add (add v4 (S(v7))) (S(v8))) (add (S(v5)) (S((add v6 (S((S(v3))))))))) (add (S(v0)) (add v0 (S(Zero)))))) = (add (add (add (add v0 (add (S((S((add (S((add (add Zero v0) v1))) (add v5 (S((S((S((S((add v7 v2))))))))))))))) (S((S((add v6 v3))))))) v8) v4) (add (S((S(v0)))) v5)))             ) [@@auto]
;;
