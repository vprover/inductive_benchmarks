#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 -> ((add (S((S((S((S((add (S((S((add (S((S(v3)))) (add (S((add Zero (S(v1))))) (S((S(v2)))))))))) (add (S((S((S(v0)))))) (S(v5)))))))))))) (S(v4))) = (S((S((S((add (S((add (add v2 v3) (add v1 (add (S((S((add v4 (S(v5))))))) (S((S((S((S((S((S((S((S((S(v0))))))))))))))))))))))) (S(Zero))))))))))             ) [@@auto]
;;
