#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (add (add (S(Zero)) (add (S((add (S(v6)) v7))) (add v3 (S(v4))))) (S((S((S(v2))))))) (S((add (S((add (S(v1)) v8))) (S((add (S(v5)) (add (S(v4)) v0)))))))) = (S((S((add (add (S((S((S((add (add (add (S(v4)) v4) (add (add v8 v5) (S((S((S((add v3 (S((S((S((add v2 (add v6 (S(v0))))))))))))))))))) Zero))))))) v7) v1))))))             ) [@@auto]
;;
