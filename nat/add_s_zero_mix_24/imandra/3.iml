#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((S((S((add (add (S((add (S(v6)) v4))) (add (add (S(v8)) v3) (S((add (S(v0)) (S(v0))))))) (add v1 (add v2 (S((S((add v5 (add (S(v1)) (add v7 (S(Zero)))))))))))))))) = (add (add (add (add v5 (S((S(Zero))))) (S(v2))) (add (add (S((add (S(v8)) v0))) (S(v4))) (add (S((add (S((S(v6)))) v1))) (S((add (S((add v1 v7))) v3)))))) (S(v0))))             ) [@@auto]
;;
