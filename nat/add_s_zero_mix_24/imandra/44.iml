#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((S((add (add (add (S(v3)) (S(v0))) v3) (S((add (add (add (S(v5)) v6) (S((S((S((S((add (S((S(v2)))) v4)))))))))) (add (add (S(v1)) (S(v6))) (S(v7))))))))) = (add (S((S(v3)))) (S((S((add (S((add (add (S(v0)) (add (add (S(v2)) v3) (S((S(v6)))))) (add (S((S(v5)))) (S((add v4 (add (S(v7)) (S(v6)))))))))) v1)))))))             ) [@@auto]
;;
