#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((add (S((S((S((add (S((add (S(v6)) (add v5 (S(v3)))))) v4))))))) (S((S((add (S((add v6 (S((add (S((add (S(v1)) v0))) (S(v7)))))))) (add v2 (S(v4))))))))) = (add (add (add v2 (add (add v7 v1) v4)) (S(v0))) (S((S((S((add (S(v5)) (add (S((add (S((add v6 (S(v3))))) (S((S((S((S(v4))))))))))) (S((S(v6))))))))))))))             ) [@@auto]
;;
