#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((add (add (add (S((S(Zero)))) Zero) (S((S((S(v3))))))) (add (S((S((add (add (add (add v2 (S(v7))) (S(v5))) (add (S((S(v6)))) (S(v1)))) (S(v4))))))) (S(v0)))) = (add (add (add v3 (S(v4))) (S((S((add (add (add (S((S(v2)))) (S(v1))) (add (S((S((S((add v0 (S(Zero))))))))) Zero)) (add (S(v7)) v6))))))) (S((S((S(v5))))))))             ) [@@auto]
;;
