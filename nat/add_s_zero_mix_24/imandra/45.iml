#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 -> ((add (S((S((add (add (S((add v9 (add (S(v10)) v4)))) (S((add (add (S(v2)) v11) (add v7 (S(v3))))))) (S((S((add v1 (add (add v8 (S(v12))) v0))))))))))) (add (S(v5)) v6)) = (S((add (add (S((S((add (add (add (S((add (add v4 (add v3 (S(v10)))) v0))) (S(v11))) v9) (add (S(v6)) (add (add v2 v5) v7))))))) (S((S((add (S(v12)) v1)))))) (S(v8))))))             ) [@@auto]
;;
