#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 -> ((S((add (S((add (S(v2)) (add (add (S((S((S(v0)))))) (S(v1))) (S((S((S((S((S((add v4 (add v6 (add v6 (S(v3))))))))))))))))))) (S((S((S(v5))))))))) = (add (S((S((add v4 (add (add (S((S((S((add (S((S((S(v6)))))) v3))))))) (S((S((add (S((S((S((add v5 v2))))))) (S((S(v0)))))))))) v6)))))) (S(v1))))             ) [@@auto]
;;
