data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (s (add (add (s (add (s (s (add (s V5) (add V1 (s (s V0)))))) (add (s V4) V3))) (add (s (s V6)) (add V3 (s zero)))) (add (s (s (s V1))) V2))) = (add (s (add (s (s (add zero (s (s V0))))) (add V5 (add V1 (add (add V6 V3) (add (s (s (s (add (s (s V4)) V3)))) (s V1))))))) (s (s (s V2))))))))))).
