data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (add (s (add V8 (s V0))) (add (add (add (s V3) (s V4)) (add (add (s V6) (s (s V2))) (s (add (s (add V1 (s V2))) (s V8))))) (s (add (s V7) V5)))) = (s (add (s (add (s (s (s V8))) V6)) (add (s (add V7 (s (s V2)))) (add V3 (add (s (add V1 (s (add V8 (s V2))))) (add (add V5 V0) (s (s V4))))))))))))))))).
