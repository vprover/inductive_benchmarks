#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((S((add (add (add (add (S((add v3 (S((S(v4))))))) (add (add (add v0 (S(v2))) (add (S(v9)) v8)) (S(v6)))) (add v5 (S(v8)))) (S(v7))) (S(v1))))) = (add (S(v9)) (S((add (add v1 v4) (add v8 (S((S((S((add (add v3 v8) (add v7 (add (S((S(v5)))) (S((add (add v0 (S((S(v6))))) v2))))))))))))))))))             ) [@@auto]
;;
