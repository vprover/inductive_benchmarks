#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((S((add (add (S((S((S(v1)))))) (add v4 (S(v2)))) (add (add (add (S(v0)) v6) (add (S((add Zero (S(v3))))) v5)) (add (S(v2)) (add (S(v7)) v0)))))) = (add (add (add (S((S((add v0 (add v3 v1)))))) (S((S(v2))))) (add (add (add (S(v4)) v7) (add v5 (S((S((add v6 (S(v2))))))))) (S((S(Zero)))))) v0))             ) [@@auto]
;;
