#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 -> ((add (S((S((add (S((S(v1)))) (add (add (add (add (S(Zero)) (S((S(v4))))) (S(v2))) (S(v4))) (add v0 (S((S(v3))))))))))) (add Zero (S(v0)))) = (S((add (add (add (S(v4)) (S(Zero))) v0) (add (S((add (S((S((add (add (S((S(v2)))) (S((S(v3))))) (add v0 v4)))))) Zero))) (S((S(v1)))))))))             ) [@@auto]
;;
