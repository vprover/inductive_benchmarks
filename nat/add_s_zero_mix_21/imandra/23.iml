#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((add (add (S((add (add (S(v7)) (S((S((S(v3))))))) (S(v0))))) (add (add v2 (S(v1))) (S(v6)))) (add (add (S(v4)) Zero) (S((add v1 (S(v5))))))) = (S((add (S((add (S(v0)) (S((add (add v6 (S(v5))) v1)))))) (add Zero (add (add (S(v1)) (add (add (S((S(v4)))) v2) (S((S((S(v3)))))))) v7))))))             ) [@@auto]
;;
