#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 -> ((add (S((S((add (S(v2)) (S((add (S(v6)) (add (S((add (S(v5)) Zero))) (add (S(v5)) v4)))))))))) (S((S((add v3 (add (S(v0)) (S(v1))))))))) = (add v4 (S((add (add (S(v3)) (add (add (S(v5)) v5) (S((S((S(v1)))))))) (S((S((S((add (S((S(Zero)))) (add (add v6 (S(v0))) v2)))))))))))))             ) [@@auto]
;;
