#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 -> ((S((S((S((add (S((S((add (S(v3)) v1))))) (add (S((add v2 (S((S((S(v6))))))))) (S((add (S(v0)) (add (S(v4)) (S(v5)))))))))))))) = (S((add (add (S(v3)) (S((S(v2))))) (S((S((add (S((add (S(v6)) (S((add v4 (S((S((add (S(v5)) (S(v0))))))))))))) (S(v1)))))))))))             ) [@@auto]
;;
