(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat)) (= (s (s (add (add (add (s v6) (s v7)) (s (add v4 (s (add v1 (s v2)))))) (add (s (s v3)) (s (s (add v6 (add (s v0) v5)))))))) (s (s (add (add v0 (add (add (s (s v1)) (add (add (s v2) (add (s (add v3 (s (s v6)))) (s (s (s v4))))) (s v6))) v5)) v7)))))))
(check-sat)
