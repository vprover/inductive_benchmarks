data nat := 
  | zero 
  | s nat.
data lst := 
  | nil 
  | cons nat lst.
val add : nat -> nat -> nat.
val app : lst -> lst -> lst.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(R:lst). (app nil R) = R).
assert (forall(A:nat). (forall(L:lst). (forall(R:lst). (app (cons A L) R) = (cons A (app L R))))).
goal   (forall(N:nat). (forall(X:lst). (app (cons (add N (s N)) X) (app X X)) = (app (app (cons (add (s N) N) X) X) X))).
