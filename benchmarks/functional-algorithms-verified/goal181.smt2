; TODO try replacing this with int
(declare-datatype nat ((zero) (s (s_0 nat))))
(declare-datatype list (par (a) ((Nil) (Cons (Cons_0 a) (Cons_1 (list a))))))
(declare-datatype tree (par (a) ((Leaf) (Node (Node_0 (tree a)) (Node_1 a) (Node_2 (tree a))))))
(declare-datatype pair (par (a b) ((Pair (Pair_0 a) (Pair_1 b)))))
(define-sort ptree (a b) (tree (pair a b)))
(declare-const LeafP (par (a b) (ptree a b)))
(assert (par (a b) (= (LeafP a b) (Leaf (pair a b)))))
(declare-fun NodeP (par (a b) ((ptree a b) a b (ptree a b)) (ptree a b)))
(assert (par (a b) (forall ((l (ptree a b)) (x a) (y b) (r (ptree a b))) (= (NodeP a b l x y r) (Node (pair a b) l (Pair a b x y) r)))))
(declare-datatype color ((Red) (Black)))
(define-sort rbt (a) (ptree a color))
(declare-datatype rbts (par (a) ((T_rbt (T_rbt_0 (rbt a))) (TTs_rbt (TTs_rbt_0 (rbt a)) (TTs_rbt_1 a) (TTs_rbt_2 (rbts a))))))
(declare-fun R (par (a) ((rbt a) a (rbt a)) (rbt a)))
(assert (par (a) (forall ((l (rbt a)) (x a) (r (rbt a))) (= (R a l x r) (NodeP a color l x Red r)))))
(declare-fun B (par (a) ((rbt a) a (rbt a)) (rbt a)))
(assert (par (a) (forall ((l (rbt a)) (x a) (r (rbt a))) (= (B a l x r) (NodeP a color l x Black r)))))
(declare-fun color_of (par (a) ((rbt a)) color))
(assert (par (a) (= (color_of a (LeafP a color)) Black)))
(assert (par (a) (forall ((l (rbt a)) (x a) (c color) (r (rbt a))) (= (color_of a (NodeP a color l x c r)) c))))
(declare-fun invc (par (a) ((rbt a)) Bool))
(assert (par (a) (invc a (LeafP a color))))
(assert (par (a) (forall ((l (rbt a)) (x a) (c color) (r (rbt a))) (= (invc a (NodeP a color l x c r))
  (and (=> (= c Red) (and (= (color_of a l) Black) (= (color_of a r) Black))) (invc a l) (invc a r))))))
(declare-fun bh (par (a) ((rbt a)) nat))
(assert (par (a) (= (bh a (LeafP a color)) zero)))
(assert (par (a) (forall ((l (rbt a)) (x a) (c color) (r (rbt a))) (= (bh a (NodeP a color l x c r))
  (ite (= c Black) (s (bh a l)) (bh a l))))))
(declare-fun invh (par (a) ((rbt a)) Bool))
(assert (par (a) (invh a (LeafP a color))))
(assert (par (a) (forall ((l (rbt a)) (x a) (c color) (r (rbt a))) (= (invh a (NodeP a color l x c r))
  (and (= (bh a l) (bh a r)) (invh a l) (invh a r))))))
(declare-fun inv_rbt (par (a) ((rbt a)) Bool))
(assert (par (a) (forall ((t (rbt a))) (= (inv_rbt a t) (and (invc a t) (invh a t) (= (color_of a t) Black))))))
(declare-fun join_adj_rbt (par (a) ((rbts a)) (rbts a)))
(assert (par (a) (forall ((t1 (rbt a)) (x a) (t2 (rbt a))) (= (join_adj_rbt a (TTs_rbt a t1 x (T_rbt a t2))) (T_rbt a (B a t1 x t2))))))
(assert (par (a) (forall ((t1 (rbt a)) (x a) (t2 (rbt a)) (y a) (t3 (rbt a))) (= (join_adj_rbt a (TTs_rbt a t1 x (TTs_rbt a t2 y (T_rbt a t3))))
  (T_rbt a (B a (R a t1 x t2) y t3))))))
(assert (par (a) (forall ((t1 (rbt a)) (x a) (t2 (rbt a)) (y a) (t3 (rbt a)) (z a) (t4 (rbt a))) (= (join_adj_rbt a (TTs_rbt a t1 x (TTs_rbt a t2 y (TTs_rbt a t3 z (T_rbt a t4)))))
  (T_rbt a (B a (R a t1 x t2) y (R a t3 z t4)))))))
(assert (par (a) (forall ((t1 (rbt a)) (x a) (t2 (rbt a)) (y a) (t3 (rbt a)) (z a) (t4 (rbt a)) (u a) (ts (rbts a)))
  (= (join_adj_rbt a (TTs_rbt a t1 x (TTs_rbt a t2 y (TTs_rbt a t3 z (TTs_rbt a t4 u ts)))))
    (TTs_rbt a (B a (R a t1 x t2) y t3) z (join_adj_rbt a (TTs_rbt a t4 u ts)))))))
(declare-fun join_all_rbt (par (a) ((rbts a)) (rbt a)))
(assert (par (a) (forall ((t (rbt a))) (= (join_all_rbt a (T_rbt a t)) t))))
(assert (par (a) (forall ((x a) (t (rbt a)) (ts (rbts a))) (= (join_all_rbt a (TTs_rbt a t x ts)) (join_all_rbt a (join_adj_rbt a (TTs_rbt a t x ts)))))))
(declare-fun leaves_rbt (par (a) ((list a)) (rbts a)))
(assert (par (a) (= (leaves_rbt a (Nil a)) (T_rbt a (LeafP a color)))))
(assert (par (a) (forall ((x a) (xs (list a))) (= (leaves_rbt a (Cons a x xs)) (TTs_rbt a (LeafP a color) x (leaves_rbt a xs))))))
(declare-fun rbt_of_list (par (a) ((list a)) (rbt a)))
(assert (par (a) (forall ((xs (list a))) (= (rbt_of_list a xs) (join_all_rbt a (leaves_rbt a xs))))))

; rbt(rbt_of_list(as))
(assert-not (par (a) (forall ((xs (list a))) (inv_rbt a (rbt_of_list a xs)))))
