; TODO try replacing this with int
(declare-datatype nat ((zero) (s (s_0 nat))))
(declare-datatype tree (par (a) ((Leaf) (Node (Node_0 (tree a)) (Node_1 a) (Node_2 (tree a))))))
(declare-datatype pair (par (a b) ((Pair (Pair_0 a) (Pair_1 b)))))
(define-sort ptree (a b) (tree (pair a b)))
(declare-const LeafP (par (a b) (ptree a b)))
(assert (par (a b) (= (LeafP a b) (Leaf (pair a b)))))
(declare-fun NodeP (par (a b) ((ptree a b) a b (ptree a b)) (ptree a b)))
(declare-datatype color ((Red) (Black)))
(define-sort rbt (a) (ptree a color))
(declare-fun bh (par (a) ((rbt a)) nat))
(assert (par (a) (= (bh a (LeafP a color)) zero)))
(assert (par (a) (forall ((l (rbt a)) (x a) (c color) (r (rbt a))) (= (bh a (NodeP a color l x c r))
  (ite (= c Black) (s (bh a l)) (bh a l))))))
(declare-fun invh (par (a) ((rbt a)) Bool))
(assert (par (a) (invh a (LeafP a color))))
(assert (par (a) (forall ((l (rbt a)) (x a) (c color) (r (rbt a))) (= (invh a (NodeP a color l x c r))
  (and (= (bh a l) (bh a r)) (invh a l) (invh a r))))))
(declare-fun in_bhs (par (a) (nat (rbt a)) Bool))
(assert (par (a) (forall ((x nat)) (= (in_bhs a x (LeafP a color)) (= x zero)))))
(assert (par (a) (forall ((x nat) (l (rbt a)) (y a) (c color) (r (rbt a))) (= (in_bhs a x (NodeP a color l y c r))
  (ite (and (= c Black) (= x zero)) false (ite (= c Black) (or (in_bhs a (s_0 x) l) (in_bhs a (s_0 x) r)) (or (in_bhs a x l) (in_bhs a x r))))))))

; invh(t) <-> bhs(t) = { bh(t) }
(assert-not (par (a) (forall ((t (rbt a))) (= (invh a t) (in_bhs a (bh a t) t)))))
