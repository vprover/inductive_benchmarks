(declare-datatype list (par (a) ((Nil) (Cons (Cons_0 a) (Cons_1 (list a))))))
(declare-datatype tree (par (a) ((Leaf) (Node (Node_0 (tree a)) (Node_1 a) (Node_2 (tree a))))))
(declare-datatype cmp_val ((LT) (EQ) (GT)))
(declare-fun less (par (a) (a a) Bool))
(declare-fun append (par (a) ((list a) (list a)) (list a)))
(assert (par (a) (forall ((ys (list a))) (= (append a (Nil a) ys) ys))))
(assert (par (a) (forall ((x a) (xs (list a)) (ys (list a))) (= (append a (Cons a x xs) ys) (Cons a x (append a xs ys))))))
(declare-fun sorted_s (par (a) ((list a)) Bool))
(assert (par (a) (sorted_s a (Nil a))))
(assert (par (a) (forall ((x a)) (sorted_s a (Cons a x (Nil a))))))
(assert (par (a) (forall ((x a) (y a) (zs (list a))) (= (sorted_s a (Cons a x (Cons a y zs))) (and (less a x y) (sorted_s a (Cons a y zs)))))))
(declare-fun inorder (par (a) ((tree a)) (list a)))
(assert (par (a) (= (inorder a (Leaf a)) (Nil a))))
(assert (par (a) (forall ((l (tree a)) (x a) (r (tree a))) (= (inorder a (Node a l x r)) (append a (inorder a l) (append a (Cons a x (Nil a)) (inorder a r)))))))
(declare-fun cmp (par (a) (a a) cmp_val))
(assert (par (a) (forall ((x a) (y a)) (= (cmp a x y) (ite (less a x y) LT (ite (= x y) EQ GT))))))
(declare-fun del_list (par (a) (a (list a)) (list a)))
(assert (par (a) (forall ((x a)) (= (del_list a x (Nil a)) (Nil a)))))
(assert (par (a) (forall ((x a) (y a) (xs (list a))) (= (del_list a x (Cons a y xs))
  (ite (= x y) xs (Cons a y (del_list a x xs)))))))
; TODO there are multiple undefined branches in splay which we cover with this uninterpreted function
(declare-const splay_undefined (par (a) (tree a)))
(declare-fun splay (par (a) (a (tree a)) (tree a)))
(assert (par (a) (forall ((x a) (AB (tree a)) (b a) (CD (tree a))) (= (splay a x (Node a AB b CD))
  (match (cmp a x b) ((LT (match AB (((Leaf a) (Node a AB b CD))
                                     ((Node a A y B') (match (cmp a x y)
                                        ((LT (ite (= A (Leaf a)) (Node a A y (Node a B' b CD))
                                            (match (splay a x A) (((Node a A1 y' A2) (Node a A1 y' (Node a A2 y (Node a B' b CD))))
                                                                  (_ (splay_undefined a))))))
                                         (EQ (Node a A y (Node a B' b CD)))
                                         (GT (ite (= B' (Leaf a)) (Node a A y (Node a B' b CD))
                                            (match (splay a x B') (((Node a B1 b' B2) (Node a (Node a A y B1) b' (Node a B2 b CD)))
                                                                  (_ (splay_undefined a))))))))))))
                      (EQ (Node a AB b CD))
                      (GT (match CD (((Leaf a) (Node a AB b CD))
                                     ((Node a C c D) (match (cmp a x c)
                                        ((LT (ite (= C (Leaf a)) (Node a (Node a AB b C) c D)
                                            (match (splay a x C) (((Node a C1 c' C2) (Node a (Node a AB b C1) c' (Node a C2 c D)))
                                                                  (_ (splay_undefined a))))))
                                         (EQ (Node a (Node a AB b C) c D))
                                         (GT (ite (= D (Leaf a)) (Node a (Node a AB b C) c D)
                                            (match (splay a x D) (((Node a D1 d D2) (Node a (Node a (Node a AB b C) c D1) d D2))
                                                                  (_ (splay_undefined a))))))))))))))))))
(declare-fun splay_max (par (a) ((tree a)) (tree a)))
(assert (par (a) (= (splay_max a (Leaf a)) (Leaf a))))
(assert (par (a) (forall ((A (tree a)) (x a)) (= (splay_max a (Node a A x (Leaf a))) (Node a A x (Leaf a))))))
(assert (par (a) (forall ((A (tree a)) (x a) (B' (tree a)) (y a) (CD (tree a))) (= (splay_max a (Node a A x (Node a B' y CD)))
  (ite (= CD (Leaf a)) (Node a (Node a A x B') y (Leaf a)) (match (splay_max a CD)
    (((Node a C z D) (Node a (Node a (Node a A x B') y C) z D))
     (_ (splay_undefined a)))))))))
(declare-fun delete_splay (par (a) (a (tree a)) (tree a)))
(assert (par (a) (forall ((x a) (t (tree a))) (= (delete_splay a x t) (ite (= t (Leaf a)) (Leaf a)
  (match (splay a x t) (((Node a l y r) (ite (distinct x y) (Node a l y r) (ite (= l (Leaf a)) r
    (match (splay_max a l) (((Node a l' z r') (Node a l' z r))
                            (_ (splay_undefined a))))))) (_ (splay_undefined a)))))))))

; sorted (inorder t) -> inorder (delete x t) = del_list x (inorder t)
(assert-not (par (a) (forall ((t (tree a)) (x a)) (=> (sorted_s a (inorder a t)) (= (inorder a (delete_splay a x t)) (del_list a x (inorder a t)))))))
