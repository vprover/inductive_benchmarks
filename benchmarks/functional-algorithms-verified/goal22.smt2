(declare-datatype list (par (a) ((Nil) (Cons (Cons_0 a) (Cons_1 (list a))))))
(declare-datatype triple (par (a b c) ((Triple (Triple_0 a) (Triple_1 b) (Triple_2 c)))))
(declare-fun less (par (a) (a a) Bool))
(declare-fun filter_less (par (a) (a (list a)) (list a)))
(assert (par (a) (forall ((x a)) (= (filter_less a x (Nil a)) (Nil a)))))
(assert (par (a) (forall ((x a) (y a) (ys (list a))) (= (filter_less a x (Cons a y ys)) (ite (less a y x) (Cons a y (filter_less a x ys)) (filter_less a x ys))))))
(declare-fun filter_greater (par (a) (a (list a)) (list a)))
(assert (par (a) (forall ((x a)) (= (filter_greater a x (Nil a)) (Nil a)))))
(assert (par (a) (forall ((x a) (y a) (ys (list a))) (= (filter_greater a x (Cons a y ys)) (ite (less a x y) (Cons a y (filter_greater a x ys)) (filter_greater a x ys))))))
(declare-fun filter_eq (par (a) (a (list a)) (list a)))
(assert (par (a) (forall ((x a)) (= (filter_eq a x (Nil a)) (Nil a)))))
(assert (par (a) (forall ((x a) (y a) (ys (list a))) (= (filter_eq a x (Cons a y ys)) (ite (= x y) (Cons a y (filter_eq a x ys)) (filter_eq a x ys))))))
(declare-fun filter_ge (par (a) (a (list a)) (list a)))
(assert (par (a) (forall ((x a)) (= (filter_ge a x (Nil a)) (Nil a)))))
(assert (par (a) (forall ((x a) (y a) (ys (list a))) (= (filter_ge a x (Cons a y ys)) (ite (not (less a y x)) (Cons a y (filter_ge a x ys)) (filter_ge a x ys))))))
(declare-fun append (par (a) ((list a) (list a)) (list a)))
(assert (par (a) (forall ((ys (list a))) (= (append a (Nil a) ys) ys))))
(assert (par (a) (forall ((x a) (xs (list a)) (ys (list a))) (= (append a (Cons a x xs) ys) (Cons a x (append a xs ys))))))
(declare-fun quicksort (par (a) ((list a)) (list a)))
(assert (par (a) (= (quicksort a (Nil a)) (Nil a))))
(assert (par (a) (forall ((x a) (xs (list a))) (= (quicksort a (Cons a x xs))
  (append a (quicksort a (filter_less a x xs)) (append a (Cons a x (Nil a)) (quicksort a (filter_ge a x xs))))))))
(declare-fun partition3 (par (a) (a (list a)) (triple (list a) (list a) (list a))))
(assert (par (a) (forall ((x a) (xs (list a))) (= (partition3 a x xs)
  (Triple (list a) (list a) (list a) (filter_less a x xs) (filter_eq a x xs) (filter_greater a x xs))))))
(declare-fun quicksort3 (par (a) ((list a)) (list a)))
(assert (par (a) (= (quicksort3 a (Nil a)) (Nil a))))
(assert (par (a) (forall ((x a) (xs (list a))) (= (quicksort3 a (Cons a x xs)) (let ((t (partition3 a x xs)))
  (append a (quicksort3 a (Triple_0 (list a) (list a) (list a) t))
    (append a (Cons a x (Triple_1 (list a) (list a) (list a) t)) (quicksort3 a (Triple_2 (list a) (list a) (list a) t)))))))))

; quicksort3(xs) = quicksort(xs)
(assert-not (par (a) (forall ((xs (list a))) (= (quicksort3 a xs) (quicksort a xs)))))

