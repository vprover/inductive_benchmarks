(declare-datatype list (par (a) ((Nil) (Cons (Cons_0 a) (Cons_1 (list a))))))
(declare-datatype heap (par (a) ((Empty) (Hp (Hp_0 a) (Hp_1 (list (heap a)))))))
(declare-fun in_set (par (a) (a (list a)) Bool))
(assert (par (a) (forall ((x a)) (not (in_set a x (Nil a))))))
(assert (par (a) (forall ((x a) (y a) (ys (list a))) (= (in_set a x (Cons a y ys)) (or (= x y) (in_set a x ys))))))
(declare-fun less (par (a) (a a) Bool))
(declare-fun leq (par (a) (a a) Bool))
(assert (par (a) (forall ((x a) (y a)) (= (less a x y) (and (leq a x y) (distinct x y))))))
(assert (par (a) (forall ((x a)) (leq a x x))))
(assert (par (a) (forall ((x a) (y a) (z a)) (=> (and (leq a x y) (leq a y z)) (leq a x z)))))
(assert (par (a) (forall ((x a) (y a)) (=> (and (leq a x y) (leq a y x)) (= x y)))))
(assert (par (a) (forall ((x a) (y a)) (or (leq a x y) (leq a y x)))))
(declare-fun in_heap (par (a) (a (heap a)) Bool))
(declare-fun in_heap_inner (par (a) (a (list (heap a))) Bool))
(assert (par (a) (forall ((x a)) (not (in_heap_inner a x (Nil (heap a)))))))
(assert (par (a) (forall ((x a) (h (heap a)) (hs (list (heap a)))) (= (in_heap_inner a x (Cons (heap a) h hs))
  (or (in_heap a x h) (in_heap_inner a x hs))))))
(assert (par (a) (forall ((x a)) (not (in_heap a x (Empty a))))))
(assert (par (a) (forall ((x a) (y a) (ys (list (heap a)))) (= (in_heap a x (Hp a y ys)) (or (= x y) (in_heap_inner a x ys))))))
(declare-fun pheap (par (a) ((heap a)) Bool))
(assert (par (a) (pheap a (Empty a))))
(assert (par (a) (forall ((x a) (hs (list (heap a)))) (= (pheap a (Hp a x hs)) (forall ((h (heap a))) (=> (in_set (heap a) h hs)
  (and (forall ((y a)) (=> (in_heap a y h) (leq a x y))) (pheap a h))))))))
(declare-fun get_min_heap (par (a) ((heap a)) a))
(assert (par (a) (forall ((x a) (hs (list (heap a)))) (= (get_min_heap a (Hp a x hs)) x))))

; h != Empty & pheap h  & x in mset_heap h -> get_min h <= x
(assert-not (par (a) (forall ((x a) (h (heap a))) (=> (and (distinct h (Empty a)) (pheap a h) (in_heap a x h))
  (leq a (get_min_heap a h) x)))))
