(declare-datatype list (par (a) ((Nil) (Cons (Cons_0 a) (Cons_1 (list a))))))
(declare-datatype pair (par (a b) ((Pair (Pair_0 a) (Pair_1 b)))))
(declare-fun in_set (par (a) (a (list a)) Bool))
(assert (par (a) (forall ((x a)) (not (in_set a x (Nil a))))))
(assert (par (a) (forall ((x a) (y a) (ys (list a))) (= (in_set a x (Cons a y ys)) (or (= x y) (in_set a x ys))))))
(declare-fun less (par (a) (a a) Bool))
(declare-fun leq (par (a) (a a) Bool))
(assert (par (a) (forall ((x a) (y a)) (= (less a x y) (and (leq a x y) (distinct x y))))))
(assert (par (a) (forall ((x a)) (leq a x x))))
(assert (par (a) (forall ((x a) (y a) (z a)) (=> (and (leq a x y) (leq a y z)) (leq a x z)))))
(assert (par (a) (forall ((x a) (y a)) (=> (and (leq a x y) (leq a y x)) (= x y)))))
(assert (par (a) (forall ((x a) (y a)) (or (leq a x y) (leq a y x)))))
(declare-fun sorted (par (a) ((list a)) Bool))
(assert (par (a) (sorted a (Nil a))))
(assert (par (a) (forall ((x a)) (sorted a (Cons a x (Nil a))))))
(assert (par (a) (forall ((x a) (z a) (y (list a))) (= (sorted a (Cons a x (Cons a z y))) (and (sorted a (Cons a z y)) (leq a x z))))))
(declare-fun merge (par (a) ((list a) (list a)) (list a)))
(assert (par (a) (forall ((ys (list a))) (= (merge a (Nil a) ys) ys))))
(assert (par (a) (forall ((xs (list a))) (= (merge a xs (Nil a)) xs))))
(assert (par (a) (forall ((x a) (xs (list a)) (y a) (ys (list a))) (= (merge a (Cons a x xs) (Cons a y ys))
  (ite (leq a x y) (Cons a x (merge a xs (Cons a y ys))) (Cons a y (merge a (Cons a x xs) ys)))))))
(declare-fun halve (par (a) ((list a) (list a) (list a)) (pair (list a) (list a))))
(assert (par (a) (forall ((xs (list a)) (ys (list a))) (= (halve a (Nil a) xs ys) (Pair (list a) (list a) xs ys)))))
(assert (par (a) (forall ((x a) (xs (list a)) (ys (list a))) (= (halve a (Cons a x (Nil a)) xs ys)
  (Pair (list a) (list a) (Cons a x xs) ys)))))
(assert (par (a) (forall ((x a) (y a) (zs (list a)) (xs (list a)) (ys (list a))) (= (halve a (Cons a x (Cons a y zs)) xs ys)
  (halve a zs (Cons a x xs) (Cons a y ys))))))
(declare-fun msort2 (par (a) ((list a)) (list a)))
(assert (par (a) (= (msort2 a (Nil a)) (Nil a))))
(assert (par (a) (forall ((x a)) (= (msort2 a (Cons a x (Nil a))) (Cons a x (Nil a))))))
(assert (par (a) (forall ((x1 a) (x2 a) (xs (list a))) (= (msort2 a (Cons a x1 (Cons a x2 xs)))
  (let ((p (halve a (Cons a x1 (Cons a x2 xs)) (Nil a) (Nil a)))) (merge a (msort2 a (Pair_0 (list a) (list a) p)) (msort2 a (Pair_1 (list a) (list a) p))))))))

; sorted(msort2(xs))
(assert-not (par (a) (forall ((xs (list a))) (sorted a (msort2 a xs)))))
