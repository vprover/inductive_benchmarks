(declare-datatype tree (par (a) ((Leaf) (Node (Node_0 (tree a)) (Node_1 a) (Node_2 (tree a))))))
(declare-datatype pair (par (a b) ((Pair (Pair_0 a) (Pair_1 b)))))
(define-sort ptree (a b) (tree (pair a b)))
(declare-const LeafP (par (a b) (ptree a b)))
(assert (par (a b) (= (LeafP a b) (Leaf (pair a b)))))
(declare-fun NodeP (par (a b) ((ptree a b) a b (ptree a b)) (ptree a b)))
(assert (par (a b) (forall ((l (ptree a b)) (x a) (y b) (r (ptree a b))) (= (NodeP a b l x y r) (Node (pair a b) l (Pair a b x y) r)))))
(define-sort ivl (a) (pair a a))
(define-sort itree (a) (ptree (ivl a) a))
(declare-fun in_set_ptree (par (a b) (a (ptree a b)) Bool))
(assert (par (a b) (forall ((x a)) (not (in_set_ptree a b x (LeafP a b))))))
(assert (par (a b) (forall ((x a) (l (ptree a b)) (y a) (z b) (r (ptree a b))) (= (in_set_ptree a b x (NodeP a b l y z r)) (or (= x y) (in_set_ptree a b x l) (in_set_ptree a b x r))))))
(declare-fun less (par (a) (a a) Bool))
(declare-fun leq (par (a) (a a) Bool))
(assert (par (a) (forall ((x a) (y a)) (= (leq a x y) (or (= x y) (less a x y))))))
(declare-fun max (par (a) (a a) a))
(assert (par (a) (forall ((x a) (y a)) (= (max a x y) (ite (leq a x y) y x)))))
(declare-const bot (par (a) a))
(declare-fun low (par (a) ((ivl a)) a))
(assert (par (a) (forall ((x (ivl a))) (= (low a x) (Pair_0 a a x)))))
(declare-fun high (par (a) ((ivl a)) a))
(assert (par (a) (forall ((x (ivl a))) (= (high a x) (Pair_1 a a x)))))
; comparison overrides
(assert (par (a) (forall ((x (ivl a)) (y (ivl a))) (= (less (ivl a) x y) (or (less a (low a x) (low a y))
  (and (= (low a x) (low a y)) (less a (high a x) (high a y))))))))
(assert (par (a) (forall ((x (ivl a)) (y (ivl a))) (= (leq (ivl a) x y) (or (less a (low a x) (low a y))
  (and (= (low a x) (low a y)) (leq a (high a x) (high a y))))))))
(declare-fun max_hi (par (a) ((itree a)) a))
(assert (par (a) (= (max_hi a (LeafP (ivl a) a)) (bot a))))
(assert (par (a) (forall ((l (itree a)) (x (ivl a)) (m a) (r (itree a))) (= (max_hi a (NodeP (ivl a) a l x m r)) m))))
(declare-fun max3 (par (a) ((ivl a) a a) a))
(assert (par (a) (forall ((x (ivl a)) (y a) (z a)) (= (max3 a x y z) (max a (high a x) (max a y z))))))
(declare-fun inv_max_hi (par (a) ((itree a)) Bool))
(assert (par (a) (inv_max_hi a (LeafP (ivl a) a))))
(assert (par (a) (forall ((l (itree a)) (x (ivl a)) (m a) (r (itree a))) (= (inv_max_hi a (NodeP (ivl a) a l x m r))
  (and (= m (max3 a x (max_hi a l) (max_hi a r))) (inv_max_hi a l) (inv_max_hi a r))))))

; inv_max_hi(t) & a in set_tree(t) -> high(a) <= max_hi(t)
(assert-not (par (a) (forall ((t (itree a))) (=> (inv_max_hi a t) (forall ((x (ivl a))) (=> (in_set_ptree (ivl a) a x t) (leq a (high a x) (max_hi a t))))))))
