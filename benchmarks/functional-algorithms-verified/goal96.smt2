; TODO try replacing this with int
(declare-datatype nat ((zero) (s (s_0 nat))))
(declare-datatype list (par (a) ((Nil) (Cons (Cons_0 a) (Cons_1 (list a))))))
(declare-datatype tree (par (a) ((Leaf) (Node (Node_0 (tree a)) (Node_1 a) (Node_2 (tree a))))))
(declare-datatype pair (par (a b) ((Pair (Pair_0 a) (Pair_1 b)))))
(declare-fun plus (nat nat) nat)
(assert (forall ((x nat)) (= (plus zero x) x)))
(assert (forall ((x nat) (y nat)) (= (plus (s x) y) (s (plus x y)))))
(declare-fun minus (nat nat) nat)
(assert (forall ((n nat)) (= (minus zero n) zero) ))
(assert (forall ((n nat)) (= (minus n zero) n) ))
(assert (forall ((n nat) (m nat)) (= (minus (s n) (s m)) (minus n m)) ))
(declare-fun div2 (nat) nat)
(assert (= (div2 zero) zero))
(assert (= (div2 (s zero)) zero))
(assert (forall ((n nat)) (= (div2 (s (s n))) (s (div2 n)))))
(declare-fun append (par (a) ((list a) (list a)) (list a)))
(assert (par (a) (forall ((ys (list a))) (= (append a (Nil a) ys) ys))))
(assert (par (a) (forall ((x a) (xs (list a)) (ys (list a))) (= (append a (Cons a x xs) ys) (Cons a x (append a xs ys))))))
(declare-fun inorder (par (a) ((tree a)) (list a)))
(assert (par (a) (= (inorder a (Leaf a)) (Nil a))))
(assert (par (a) (forall ((l (tree a)) (x a) (r (tree a))) (= (inorder a (Node a l x r)) (append a (inorder a l) (append a (Cons a x (Nil a)) (inorder a r)))))))
(declare-fun size (par (a) ((tree a)) nat))
(assert (par (a) (= (size a (Leaf a)) zero)))
(assert (par (a) (forall ((l (tree a)) (x a) (r (tree a))) (= (size a (Node a l x r)) (s (plus (size a l) (size a r)))))))
(declare-fun balance (par (a) (nat (list a)) (pair (tree a) (list a))))
(assert (par (a) (forall ((n nat) (xs (list a))) (= (balance a n xs) (ite (= n zero) (Pair (tree a) (list a) (Leaf a) xs)
  (let ((m (div2 n))) (let ((lys (balance a m xs))) (let ((rzs (balance a (minus n (s m)) (Cons_1 a (Pair_1 (tree a) (list a) (lys a))))))
    (Pair (tree a) (list a) (Node a (Pair_0 (tree a) (list a) (lys a)) (Cons_0 a (Pair_1 (tree a) (list a) (lys a))) (Pair_0 (tree a) (list a) (rzs a))) (Pair_1 (tree a) (list a) (rzs a)))))))))))
(declare-fun bal_list (par (a) (nat (list a)) (tree a)))
(assert (par (a) (forall ((n nat) (xs (list a))) (= (bal_list a n xs) (Pair_0 (tree a) (list a) (balance a n xs))))))
(declare-fun bal_tree (par (a) (nat (tree a)) (tree a)))
(assert (par (a) (forall ((n nat) (t (tree a))) (= (bal_tree a n t) (bal_list a n (inorder a t))))))
(declare-fun balance_tree (par (a) ((tree a)) (tree a)))
(assert (par (a) (forall ((t (tree a))) (= (balance_tree a t) (bal_tree a (size a t) t)))))

; inorder(balance_tree(t)) = inorder(t)
(assert-not (par (a) (forall ((t (tree a))) (= (inorder a (balance_tree a t)) (inorder a t)))))
