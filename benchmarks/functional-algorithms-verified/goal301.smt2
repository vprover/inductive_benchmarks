; TODO try replacing this with int
(declare-datatype nat ((zero) (s (s_0 nat))))
(declare-datatype tree (par (a) ((Leaf) (Node (Node_0 (tree a)) (Node_1 a) (Node_2 (tree a))))))
(declare-datatype pair (par (a b) ((Pair (Pair_0 a) (Pair_1 b)))))
(define-sort ptree (a b) (tree (pair a b)))
(declare-const LeafP (par (a b) (ptree a b)))
(assert (par (a b) (= (LeafP a b) (Leaf (pair a b)))))
(declare-fun NodeP (par (a b) ((ptree a b) a b (ptree a b)) (ptree a b)))
(assert (par (a b) (forall ((l (ptree a b)) (x a) (y b) (r (ptree a b))) (= (NodeP a b l x y r) (Node (pair a b) l (Pair a b x y) r)))))
(define-sort lheap (a) (ptree a nat))
(declare-fun less (par (a) (a a) Bool))
(assert (forall ((x nat)) (not (less nat x zero))))
(assert (forall ((x nat)) (less nat zero (s x))))
(assert (forall ((x nat) (y nat)) (= (less nat (s x) (s y)) (less nat x y))))
(declare-fun leq (par (a) (a a) Bool))
(assert (par (a) (forall ((x a) (y a)) (= (leq a x y) (or (= x y) (less a x y))))))
(declare-fun mht (par (a) ((lheap a)) nat))
(assert (par (a) (= (mht a (LeafP a nat)) zero)))
(assert (par (a) (forall ((l (lheap a)) (m a) (n nat) (r (lheap a))) (= (mht a (NodeP a nat l m n r)) n))))
(declare-fun ltree (par (a) ((lheap a)) Bool))
(assert (par (a) (ltree a (LeafP a nat))))
; TODO in the text mh is used instead of mht here
(assert (par (a) (forall ((l (lheap a)) (m a) (n nat) (r (lheap a))) (= (ltree a (NodeP a nat l m n r))
  (and (leq nat (mht a r) (mht a l)) (= n (s (mht a r))) (ltree a l) (ltree a r))))))
(declare-fun node_lheap (par (a) ((lheap a) a (lheap a)) (lheap a)))
(assert (par (a) (forall ((l (lheap a)) (x a) (r (lheap a))) (= (node_lheap a l x r)
  (let ((mhl (mht a l)) (mhr (mht a r))) (ite (leq nat mhr mhl) (NodeP a nat l x (s mhr) r) (NodeP a nat r x (s mhl) l)))))))
(declare-fun merge_lheap (par (a) ((lheap a) (lheap a)) (lheap a)))
(assert (par (a) (forall ((t (lheap a))) (= (merge_lheap a (LeafP a nat) t) t))))
(assert (par (a) (forall ((t (lheap a))) (= (merge_lheap a t (LeafP a nat)) t))))
(assert (par (a) (forall ((l1 (lheap a)) (a1 a) (n1 nat) (r1 (lheap a)) (l2 (lheap a)) (a2 a) (n2 nat) (r2 (lheap a)))
  (= (merge_lheap a (NodeP a nat l1 a1 n1 r1) (NodeP a nat l2 a2 n2 r2))
    (ite (leq a a1 a2) (node_lheap a l1 a1 (merge_lheap a r1 (NodeP a nat l2 a2 n2 r2)))
      (node_lheap a l2 a2 (merge_lheap a (NodeP a nat l1 a1 n1 r1) r2)))))))
(declare-fun del_min_lheap (par (a) ((lheap a)) (lheap a)))
(assert (par (a) (= (del_min_lheap a (LeafP a nat)) (LeafP a nat))))
(assert (par (a) (forall ((l (lheap a)) (x a) (n nat) (r (lheap a))) (= (del_min_lheap a (NodeP a nat l x n r))
  (merge_lheap a l r)))))
(declare-fun T_merge_lheap (par (a) ((lheap a) (lheap a)) nat))
(assert (par (a) (forall ((t (lheap a))) (= (T_merge_lheap a (LeafP a nat) t) (s zero)))))
(assert (par (a) (forall ((t (lheap a))) (= (T_merge_lheap a t (LeafP a nat)) (s zero)))))
(assert (par (a) (forall ((l1 (lheap a)) (a1 a) (n1 nat) (r1 (lheap a)) (l2 (lheap a)) (a2 a) (n2 nat) (r2 (lheap a)))
  (= (T_merge_lheap a (NodeP a nat l1 a1 n1 r1) (NodeP a nat l2 a2 n2 r2))
    (s (ite (leq a a1 a2) (T_merge_lheap a r1 (NodeP a nat l2 a2 n2 r2)) (T_merge_lheap a (NodeP a nat l1 a1 n1 r1) r2)))))))
(declare-fun T_insert_lheap (par (a) (a (lheap a)) nat))
(assert (par (a) (forall ((x a) (t (lheap a))) (= (T_insert_lheap a x t)
  (s (T_merge_lheap a (NodeP a nat (LeafP a nat) x (s zero) (LeafP a nat)) t))))))
(declare-fun T_del_min_lheap (par (a) ((lheap a)) nat))
(assert (par (a) (= (T_del_min_lheap a (LeafP a nat)) (s zero))))
(assert (par (a) (forall ((l (lheap a)) (x a) (n nat) (r (lheap a)))
  (= (T_del_min_lheap a (NodeP a nat l x n r)) (s (T_merge_lheap a l r))))))

; ltree t -> ltree (del_min t)
(assert-not (par (a) (forall ((t (lheap a))) (=> (ltree a t) (ltree a (del_min_lheap a t))))))
