; TODO try replacing this with int
(declare-datatype nat ((zero) (s (s_0 nat))))
(declare-datatype tree (par (a) ((Leaf) (Node (Node_0 (tree a)) (Node_1 a) (Node_2 (tree a))))))
(declare-fun plus (nat nat) nat)
(assert (forall ((x nat)) (= (plus zero x) x)))
(assert (forall ((x nat) (y nat)) (= (plus (s x) y) (s (plus x y)))))
(declare-fun mult (nat nat) nat)
(assert (forall ((x nat)) (= (mult zero x) zero)))
(assert (forall ((x nat) (y nat)) (= (mult (s x) y) (plus (mult x y) y))))
(declare-fun minus (nat nat) nat)
(assert (forall ((n nat)) (= (minus zero n) zero) ))
(assert (forall ((n nat)) (= (minus n zero) n) ))
(assert (forall ((n nat) (m nat)) (= (minus (s n) (s m)) (minus n m)) ))
(declare-fun less (par (a) (a a) Bool))
(assert (forall ((x nat)) (not (less nat x zero))))
(assert (forall ((x nat)) (less nat zero (s x))))
(assert (forall ((x nat) (y nat)) (= (less nat (s x) (s y)) (less nat x y))))
(declare-fun leq (par (a) (a a) Bool))
(assert (par (a) (forall ((x a) (y a)) (= (less a x y) (and (leq a x y) (distinct x y))))))
(assert (par (a) (forall ((x a)) (leq a x x))))
(assert (par (a) (forall ((x a) (y a) (z a)) (=> (and (leq a x y) (leq a y z)) (leq a x z)))))
(assert (par (a) (forall ((x a) (y a)) (=> (and (leq a x y) (leq a y x)) (= x y)))))
(assert (par (a) (forall ((x a) (y a)) (or (leq a x y) (leq a y x)))))
(declare-fun pow (nat nat) nat)
(assert (forall ((x nat)) (= (pow x zero) (s zero))))
(assert (forall ((x nat) (e nat)) (= (pow x (s e)) (mult x (pow x e)))))
(declare-fun pow2 (nat) nat)
(assert (forall ((x nat)) (= (pow2 x) (pow (s (s zero)) x))))
(declare-fun size (par (a) ((tree a)) nat))
(assert (par (a) (= (size a (Leaf a)) zero)))
(assert (par (a) (forall ((l (tree a)) (x a) (r (tree a))) (= (size a (Node a l x r)) (s (plus (size a l) (size a r)))))))
(declare-fun size1 (par (a) ((tree a)) nat))
(assert (par (a) (= (size1 a (Leaf a)) (s zero))))
(assert (par (a) (forall ((l (tree a)) (x a) (r (tree a))) (= (size1 a (Node a l x r)) (plus (size1 a l) (size1 a r))))))
(declare-fun merge_skew (par (a) ((tree a) (tree a)) (tree a)))
(assert (par (a) (forall ((t (tree a))) (= (merge_skew a (Leaf a) t) t))))
(assert (par (a) (forall ((t (tree a))) (= (merge_skew a t (Leaf a)) t))))
(assert (par (a) (forall ((l1 (tree a)) (a1 a) (r1 (tree a)) (l2 (tree a)) (a2 a) (r2 (tree a))) (= (merge_skew a (Node a l1 a1 r1) (Node a l2 a2 r2))
  (ite (leq a a1 a2) (Node a (merge_skew a (Node a l2 a2 r2) r1) a1 l1) (Node a (merge_skew a (Node a l1 a1 r1) r2) a2 l2))))))
(declare-fun insert_skew (par (a) (a (tree a)) (tree a)))
(assert (par (a) (forall ((x a) (t (tree a))) (= (insert_skew a x t)
  (merge_skew a (Node a (Leaf a) x (Leaf a)) t)))))
(declare-fun rh (par (a) ((tree a) (tree a)) nat))
(assert (par (a) (forall ((l (tree a)) (r (tree a))) (= (rh a l r) (ite (leq nat (size a l) (size a r)) (s zero) zero)))))
(declare-fun psi_skew (par (a) ((tree a)) nat))
(assert (par (a) (= (psi_skew a (Leaf a)) zero)))
(assert (par (a) (forall ((l (tree a)) (x a) (r (tree a))) (= (psi_skew a (Node a l x r)) (plus (plus (psi_skew a l) (psi_skew a r)) (rh a l r))))))
(declare-fun T_merge_skew (par (a) ((tree a) (tree a)) nat))
(assert (par (a) (forall ((t (tree a))) (= (T_merge_skew a (Leaf a) t) (s zero)))))
(assert (par (a) (forall ((t (tree a))) (= (T_merge_skew a t (Leaf a)) (s zero)))))
(assert (par (a) (forall ((l1 (tree a)) (a1 a) (r1 (tree a)) (l2 (tree a)) (a2 a) (r2 (tree a))) (= (T_merge_skew a (Node a l1 a1 r1) (Node a l2 a2 r2))
  (s (ite (leq a a1 a2) (T_merge_skew a (Node a l2 a2 r2) r1) (T_merge_skew a (Node a l1 a1 r1) r2)))))))
(declare-fun T_insert_skew (par (a) (a (tree a)) nat))
(assert (par (a) (forall ((x a) (t (tree a))) (= (T_insert_skew a x t)
  (s (T_merge_skew a (Node a (Leaf a) x (Leaf a)) t))))))

; T_insert a t + psi (insert a t) - psi t <= 3 * lg(|t|_1 + 2) + 2 ; TODO double check this
(assert-not (par (a) (forall ((x a) (t (tree a))) (leq nat (pow2 (minus (plus (T_insert_skew a x t) (psi_skew a (insert_skew a x t))) (psi_skew a t)))
  (mult (mult (mult (s (s (size1 a t))) (s (s (size1 a t)))) (s (s (size1 a t)))) (s (s (s (s zero)))))))))
