; TODO try replacing this with int
(declare-datatype nat ((zero) (s (s_0 nat))))
(declare-datatype tree (par (a) ((Leaf) (Node (Node_0 (tree a)) (Node_1 a) (Node_2 (tree a))))))
(declare-datatype pair (par (a b) ((Pair (Pair_0 a) (Pair_1 b)))))
(declare-fun plus (nat nat) nat)
(assert (forall ((x nat)) (= (plus zero x) x)))
(assert (forall ((x nat) (y nat)) (= (plus (s x) y) (s (plus x y)))))
(declare-fun div2 (nat) nat)
(assert (= (div2 zero) zero))
(assert (= (div2 (s zero)) zero))
(assert (forall ((n nat)) (= (div2 (s (s n))) (s (div2 n)))))
(declare-fun odd (nat) Bool)
(assert (not (odd zero)))
(assert (forall ((x nat)) (= (odd (s x)) (not (odd x)))))
(declare-fun size (par (a) ((tree a)) nat))
(assert (par (a) (= (size a (Leaf a)) zero)))
(assert (par (a) (forall ((l (tree a)) (x a) (r (tree a))) (= (size a (Node a l x r)) (s (plus (size a l) (size a r)))))))
(declare-fun braun (par (a) ((tree a)) Bool))
(assert (par (a) (braun a (Leaf a))))
(assert (par (a) (forall ((l (tree a)) (x a) (r (tree a))) (= (braun a (Node a l x r))
  (and (or (= (size a l) (size a r)) (= (size a l) (s (size a r)))) (braun a l) (braun a r))))))
(declare-fun braun2_of (par (a) (a nat) (pair (tree a) (tree a))))
(assert (par (a) (forall ((x a) (n nat)) (= (braun2_of a x n)
  (ite (= n zero) (Pair (tree a) (tree a) (Leaf a) (Node a (Leaf a) x (Leaf a)))
    (let ((st (braun2_of a x (div2 (s_0 n))))) (ite (odd n)
      (Pair (tree a) (tree a) (Node a (Pair_0 (tree a) (tree a) (st a)) x (Pair_0 (tree a) (tree a) (st a)))
                              (Node a (Pair_1 (tree a) (tree a) (st a)) x (Pair_0 (tree a) (tree a) (st a))))
      (Pair (tree a) (tree a) (Node a (Pair_1 (tree a) (tree a) (st a)) x (Pair_0 (tree a) (tree a) (st a)))
                              (Node a (Pair_1 (tree a) (tree a) (st a)) x (Pair_1 (tree a) (tree a) (st a)))))))))))

; braun2_of(x,n) = (s,t) -> |s| = n & |t| = n + 1 & braun(s) & braun(t)
(assert-not (par (a) (forall ((x a) (n nat) (t (tree a)) (t' (tree a))) (=> (= (braun2_of a x n) (Pair (tree a) (tree a) t t'))
  (and (= (size a t) n) (= (size a t') (s n)) (braun a t) (braun a t'))))))
