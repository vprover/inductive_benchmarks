(declare-datatypes ((Nat 0)) (((succ (pred Nat)) (zero))
))
(declare-datatypes ((Lst 0)) (((cons (head Nat) (tail Lst)) (nil))
))
(declare-fun len (Lst) Nat)
(assert (= (len nil) zero))
(assert (forall ((x Nat) (y Lst)) (= (len (cons x y)) (succ (len y))) ))
(declare-fun append (Lst Lst) Lst)
(assert (forall ((x Lst)) (= (append nil x) x) ))
(assert (forall ((x Nat) (y Lst) (z Lst)) (= (append (cons x y) z) (cons x (append y z))) ))
(declare-fun rotate (Nat Lst) Lst)
(assert (forall ((x Lst)) (= (rotate zero x) x) ))
(assert (forall ((n Nat)) (= (rotate (succ n) nil) nil) ))
(assert (forall ((n Nat) (y Nat) (x Lst)) (= (rotate (succ n) (cons y x)) (rotate n (append x (cons y nil)))) ))
(declare-fun shuffle (Lst Lst) Lst)
(assert (forall ((xs Lst)) (= (shuffle nil xs) nil)))
(assert (forall ((x Nat) (xs Lst) (ys Lst)) (= (shuffle (cons x xs) ys) (rotate x (shuffle xs ys))) ))
(assert (not (forall ((xs Lst) (ys Lst)) (= (len (shuffle xs ys)) (len ys)) )))
(check-sat)
(exit)

