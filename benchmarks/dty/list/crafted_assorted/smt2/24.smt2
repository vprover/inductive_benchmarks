(declare-datatypes ((Nat 0)) (((succ (pred Nat)) (zero))
))
(declare-datatypes ((Lst 0)) (((cons (head Nat) (tail Lst)) (nil))
))
(declare-fun leq (Nat Nat) Bool)
(assert (forall ((x Nat)) (leq x x)))
(assert (forall ((x Nat) (y Nat) (z Nat)) (=> (and (leq x y) (leq y z)) (leq x z))))
(assert (forall ((x Nat) (y Nat)) (=> (and (leq x y) (leq y x)) (= x y))))
(assert (forall ((x Nat) (y Nat)) (or (leq x y) (leq y x))))
(declare-fun P (Nat) Bool)
(declare-fun filter (Lst) Lst)
(assert (= (filter nil) nil))
(assert (forall ((x Nat) (y Lst)) (= (filter (cons x y)) (ite (P x) (cons x (filter y)) (filter y))) ))
(declare-fun insort (Nat Lst) Lst)
(assert (forall ((i Nat)) (= (insort i nil) (cons i nil)) ))
(assert (forall ((i Nat) (x Nat) (y Lst)) (= (insort i (cons x y)) (ite (leq i x) (cons i (cons x y)) (cons x (insort i y)))) ))
(declare-fun sort (Lst) Lst)
(assert (= (sort nil) nil))
(assert (forall ((x Nat) (y Lst)) (= (sort (cons x y)) (insort x (sort y))) ))
(assert (not (forall ((xs Lst)) (= (sort (filter xs)) (filter (sort xs))) )))
(check-sat)
(exit)

