(declare-datatypes ((Nat 0)) (((succ (pred Nat)) (zero))
))
(declare-datatypes ((Lst 0)) (((cons (head Nat) (tail Lst)) (nil))
))
(declare-fun leq (Nat Nat) Bool)
(assert (forall ((x Nat)) (leq x x)))
(assert (forall ((x Nat) (y Nat) (z Nat)) (=> (and (leq x y) (leq y z)) (leq x z))))
(assert (forall ((x Nat) (y Nat)) (=> (and (leq x y) (leq y x)) (= x y))))
(assert (forall ((x Nat) (y Nat)) (or (leq x y) (leq y x))))
(declare-fun append (Lst Lst) Lst)
(assert (forall ((x Lst)) (= (append nil x) x) ))
(assert (forall ((x Nat) (y Lst) (z Lst)) (= (append (cons x y) z) (cons x (append y z))) ))
(declare-fun rev (Lst) Lst)
(assert (= (rev nil) nil))
(assert (forall ((x Nat) (y Lst)) (= (rev (cons x y)) (append (rev y) (cons x nil))) ))
(declare-fun insort (Nat Lst) Lst)
(assert (forall ((i Nat)) (= (insort i nil) (cons i nil)) ))
(assert (forall ((i Nat) (x Nat) (y Lst)) (= (insort i (cons x y)) (ite (leq i x) (cons i (cons x y)) (cons x (insort i y)))) ))
(declare-fun sort (Lst) Lst)
(assert (= (sort nil) nil))
(assert (forall ((x Nat) (y Lst)) (= (sort (cons x y)) (insort x (sort y))) ))
(declare-fun leq_than_l (Nat Lst) Bool)
(assert (forall ((x Nat)) (leq_than_l x nil)))
(assert (forall ((x Nat) (y Nat) (ys Lst)) (= (leq_than_l x (cons y ys)) (and (leq x y) (leq_than_l x ys))) ))
(declare-fun leq_than_ll (Lst Lst) Bool)
(assert (forall ((xs Lst)) (leq_than_ll nil xs)))
(assert (forall ((x Nat) (xs Lst) (ys Lst)) (= (leq_than_ll (cons x xs) ys) (and (leq_than_ll x ys) (leq_than_ll xs ys))) ))
(assert (not (forall ((xs Lst) (ys Lst)) (=> (less_than_ll xs ys) (= (append (sort xs) (sort ys)) (sort (append xs ys))) ))))
(check-sat)
(exit)

