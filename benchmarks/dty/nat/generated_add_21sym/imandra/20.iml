#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (S((S((add (S((S(v0)))) (S((add (S((S((add (add (S(v4)) v2) v5))))) v3)))))))) (add (S((add (add v8 (S(v1))) (S(v6))))) (S(v7)))) = (S((S((add v1 (add (add (S(v0)) (add v4 v6)) (S((S((S((S((add (S(v8)) (S((add (add v5 (S((add v7 (S((S(v2)))))))) v3)))))))))))))))))))             ) [@@auto]
;;
