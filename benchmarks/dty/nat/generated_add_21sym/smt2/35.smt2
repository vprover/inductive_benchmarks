(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat)) (= (s (s (add (add (add (s (s v0)) (s v6)) (s v6)) (add (add v6 (s (add (s (s v4)) v3))) (add (s v5) (add (s v2) (s v1))))))) (s (s (add (add v6 v4) (s (s (add (s (s (add v0 (add v2 (s (s (s v1))))))) (add v6 (add (add (s v6) v3) (s (s v5))))))))))))))
(check-sat)
