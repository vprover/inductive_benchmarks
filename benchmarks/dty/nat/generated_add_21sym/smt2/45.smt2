(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat)) (= (s (add (add (s (s (s v1))) (add v4 (s v2))) (add (add (add (s v0) v6) (add (s (add zero (s v3))) v5)) (add (s v2) (add (s v7) v0))))) (add (add (add (s (s (add v0 (add v3 v1)))) (s (s v2))) (add (add (add (s v4) v7) (add v5 (s (s (add v6 (s v2)))))) (s (s zero)))) v0)))))
(check-sat)
