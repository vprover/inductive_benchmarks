(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat)) (= (add (s (s (add (s (s v0)) (s (add (s (s (add (add (s v4) v2) v5))) v3))))) (add (s (add (add v8 (s v1)) (s v6))) (s v7))) (s (s (add v1 (add (add (s v0) (add v4 v6)) (s (s (s (s (add (s v8) (s (add (add v5 (s (add v7 (s (s v2))))) v3)))))))))))))))
(check-sat)
