(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat)) (= (s (add (add (add (s v7) v4) (s (s (s (s v5))))) (s (add (s (add (s (s v2)) (add (s v1) (add v0 (s v3))))) (s v6))))) (s (s (add (add (s (s v2)) (s (s v7))) (add (add (s (add v3 (add v6 (s (s (s (add v1 v4))))))) (s (s (s v5)))) v0))))))))
(check-sat)
