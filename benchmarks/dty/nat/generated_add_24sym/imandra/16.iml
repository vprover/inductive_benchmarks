#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((S((add v1 (S((add (add (add (S(v9)) v3) (add (S((add (S((S((add (S(v4)) (S(v8))))))) (S(v7))))) (add v0 (S((add v2 (S((add (S(v6)) v5))))))))) (S(v8)))))))) = (S((add v1 (S((add (S((add (add (S((S(v6)))) (S(v9))) v3))) (add (add (add (add v7 (add (S(v2)) (add (S(v4)) (S((S(v8))))))) (S((S(v5))))) v8) (S(v0))))))))))             ) [@@auto]
;;
