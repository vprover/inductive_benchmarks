(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat)) (= (add (add (add (add (s v2) v1) (s (s v5))) v0) (add (add (add (add v4 (s v7)) (s v8)) (add (s v5) (s (add v6 (s (s v3)))))) (add (s v0) (add v0 (s zero))))) (add (add (add (add v0 (add (s (s (add (s (add (add zero v0) v1)) (add v5 (s (s (s (s (add v7 v2))))))))) (s (s (add v6 v3))))) v8) v4) (add (s (s v0)) v5))))))
(check-sat)
