(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat)) (= (s (add (add (s (add (s (s (add (s (add (s zero) v2)) (add (s v0) v6)))) (s (s (s (s (s (s v1)))))))) (add v7 (add (s v4) v3))) (s v5))) (add (add (add (s (s v4)) v0) (s (add v5 (add v2 (add (s (s zero)) v7))))) (s (s (s (s (add (s (add (s (s (s v6))) v3)) (s (s v1))))))))))))
(check-sat)
