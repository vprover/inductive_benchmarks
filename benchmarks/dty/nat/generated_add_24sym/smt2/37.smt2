(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat)) (= (add (s (add v8 (s v0))) (add (add (add (s v3) (s v4)) (add (add (s v6) (s (s v2))) (s (add (s (add v1 (s v2))) (s v8))))) (s (add (s v7) v5)))) (s (add (s (add (s (s (s v8))) v6)) (add (s (add v7 (s (s v2)))) (add v3 (add (s (add v1 (s (add v8 (s v2))))) (add (add v5 v0) (s (s v4))))))))))))
(check-sat)
