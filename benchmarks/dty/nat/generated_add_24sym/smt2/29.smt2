(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat)) (= (add (add v3 (s (s (s v7)))) (add (add (add (add v3 (s v4)) (s (add (s v0) v0))) (add (s (add v1 (s (s (s v6))))) v4)) (s (add (s v5) (s v2))))) (add (add (s (s v5)) (s v1)) (add (s (s (add (add (s v4) v0) (add v0 v7)))) (s (s (add v4 (s (add v6 (add v2 (s (s (add (s v3) (s v3))))))))))))))))
(check-sat)
