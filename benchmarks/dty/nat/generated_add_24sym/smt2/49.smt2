(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat)) (= (add (s (s v7)) (add (s (s (add (add (s v2) (s v0)) v2))) (add (s (s v6)) (s (add (add (add (s v5) (s v3)) v0) (s (add (s v4) (s v1)))))))) (add (add (s v0) (s (add (s (s (add (add v6 v3) (s (add (s (s v2)) (add (s v5) (s (s (s (s (s v7))))))))))) v4))) (add (add v2 v0) (s v1)))))))
(check-sat)
