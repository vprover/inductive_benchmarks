(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat) (v10 nat)) (= (add (add (s (s v10)) (add (s (s (add (add (s v6) (s v7)) (s (s (add v4 (s v2))))))) (add (add v1 (s v8)) (add (add (s v5) v9) v0)))) (add v9 (s v3))) (add (add v5 (s (add (add v0 (s (add (add (s (add v6 (s (s v10)))) (add v2 (s v8))) (add v9 (s v3))))) v4))) (s (add v9 (s (s (add v7 (s (s v1))))))))))))
(check-sat)
