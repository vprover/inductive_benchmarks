(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat)) (= (add (add (s (s (s (add (add (add (s v3) (add (s v0) v5)) v4) (s v6))))) (s v2)) (s (s (add (s (s (s (add (add v6 (s zero)) v1)))) (s v2))))) (s (s (s (add v4 (s (add (s (add (s v2) (s (add (s (s v6)) zero)))) (add v5 (add (s (s (add v3 v0))) (add v6 (s (add (s (s v2)) v1)))))))))))))))
(check-sat)
