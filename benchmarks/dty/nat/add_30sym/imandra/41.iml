#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 -> ((add (S(v1)) (add (add (S(v3)) (S((S((S(v8))))))) (S((add (add (S(v4)) (add (S((S((add (add (S(v10)) (add (S(v0)) (add (S(v2)) (add v5 (S(v2)))))) v6))))) (add (S(v2)) (S(v9))))) (S((S(v7))))))))) = (add (add (add (S((add (S((S((S((S(v6)))))))) v2))) v7) (S((add (add v2 v8) (add (S((S((add (add (S((add (S(v10)) (S((S((S(v5))))))))) v0) (S((add (S(v2)) v9)))))))) v4))))) (S((add (S(v3)) v1)))))             ) [@@auto]
;;
