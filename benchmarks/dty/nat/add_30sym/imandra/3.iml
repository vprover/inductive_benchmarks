#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (S((add (S((add v2 (add (S(v8)) v6)))) (S((S((S((add (add v4 (S(v2))) (S(v7)))))))))))) (S((add v1 (S((add (add (S(v5)) (add v3 (S((S((S((S((add (add v0 (S(v0))) v0))))))))))) (S(v8))))))))) = (S((add (add (S((add (add v0 (S((S((S((add (S(v2)) (S((S((S((S(v4)))))))))))))))) (add (add v5 v3) v6)))) v0) (S((S((S((S((add v0 (add (add (add v8 (add v2 (S(v1)))) (S((S(v7))))) v8))))))))))))))             ) [@@auto]
;;
