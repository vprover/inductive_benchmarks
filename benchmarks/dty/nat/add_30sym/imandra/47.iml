#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 -> ((S((add (S((add (add (add (S((S(v1)))) v9) (S(v10))) (S((S(v9))))))) (add (S((S((add (add (S(v6)) (add (S((add v8 (add v4 (S(v3)))))) (S((add (S((S(v7)))) (add v0 (add (S(v2)) v6))))))) v5))))) v11)))) = (S((S((S((add (add v10 (add (add (add (S((add v9 (add v1 (S(v0)))))) (add v6 v8)) v2) (S((S((add (S(v6)) (add (S((add v11 (S(v3))))) v7)))))))) (S((S((S((add v5 (add (S((S(v4)))) (S(v9))))))))))))))))))             ) [@@auto]
;;
