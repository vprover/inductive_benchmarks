(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat)) (= (add (add (add (s (s (add v4 (s v3)))) (s (add (s v2) (s v5)))) (add (s (s (s v4))) (s v0))) (s v1)) (add (s (s (add (s (s (s (add (add (add v0 v2) (s v3)) (add (s v4) v1))))) v5))) (s (s (s (s v4)))))))))
(check-sat)
