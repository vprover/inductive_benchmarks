(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat)) (= (add (s (add (s (add v7 (add v3 (s v1)))) (add v1 (s v7)))) (add (add v6 (s v0)) (add (s v4) (add (add (s v3) v2) v5)))) (s (s (add (s (s v3)) (add v4 (add (add (add v5 (s (add (add v7 v0) v1))) v3) (s (add (add v2 (add v1 v7)) (s v6))))))))))))
(check-sat)
