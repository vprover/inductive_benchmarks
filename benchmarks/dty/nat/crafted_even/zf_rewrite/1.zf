data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def mul : nat -> nat -> nat where
(forall(Y:nat). (mul zero Y) = zero);
(forall(X:nat). (forall(Y:nat). (mul (s X) Y) = (add (mul X Y) Y))).
def even : nat -> prop where
((even zero) <=> ~(false));
((even (s zero)) <=> false);
(forall(Y:nat). (even (s (s Y))) <=> (even Y)).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (mul zero Y) = zero).
assert (forall(X:nat). (forall(Y:nat). (mul (s X) Y) = (add (mul X Y) Y))).
assert (even zero).
assert (~(even (s zero))).
assert (forall(Y:nat). (even (s (s Y))) <=> (even Y)).
goal   (forall(X:nat). (forall(Y:nat). (((even X) || (even Y)) => (even (mul X Y))))).
