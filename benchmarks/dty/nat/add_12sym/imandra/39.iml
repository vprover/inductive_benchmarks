#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 -> ((S((add (add (S(v1)) (add Zero (S(v0)))) (S((add (S(v2)) (add v3 (S(v2))))))))) = (add (add (S((add v2 (S((S((add (S(v3)) v0)))))))) v1) (S((S((add Zero v2)))))))             ) [@@auto]
;;
