data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (forall(V10:nat). (s (add (add (add (add (add (s V8) (add V5 (s V1))) V4) (s V6)) (add (add (s V0) (s V2)) (add (s V7) V9))) (s (s (s (add (s (add (add V7 (s V10)) (s V3))) (s zero))))))) = (add (s (add (add V2 (add (s (s (add V8 zero))) V10)) V7)) (add (s (s (add (add (add (s (s V7)) (s (add V6 (s (add V1 V3))))) (s (s (s (add V9 V5))))) (s (s V0))))) V4))))))))))))).
