data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (s (s (s (add (add (add (s (add (add (s (add (s V0) V3)) (s V5)) V2)) (s (s (s V5)))) (add V2 (add (s V4) V7))) (add (s V1) (add (s (s V2)) (add V3 (s V6)))))))) = (s (add (add (add (add (add V3 V0) (s V2)) (s V2)) (s (add V4 (s (s V5))))) (s (s (s (add (add (add (add V2 (s V6)) (add V1 V7)) V3) (s (s (s (s (s V5))))))))))))))))))).
