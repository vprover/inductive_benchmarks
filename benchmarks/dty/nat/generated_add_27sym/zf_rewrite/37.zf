data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (s (s (s (add (add (s V5) V8) (add (s V6) (add (s (add (s V0) V1)) (s (add (add V4 (s zero)) (s (s (s (s (add (add (add (s V2) V3) (s V1)) (s V7)))))))))))))) = (s (s (s (add (s (add (s (add (s (add (s (s (s (s V0)))) V1)) (s (s (s (s V2)))))) (s (add (add (s V1) (add V3 zero)) (add (add V8 (add V6 V4)) V5))))) V7))))))))))))).
