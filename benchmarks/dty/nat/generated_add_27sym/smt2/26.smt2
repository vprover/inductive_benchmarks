(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat)) (= (s (s (add (s (add v7 (add (s v4) (add (add (s v3) v5) v0)))) (s (s (add (s (s v6)) (add (s (s (add (s v3) v8))) (add (add (s zero) v2) (s (add (s v1) v3)))))))))) (add v4 (add (s v8) (add (s (s (add (s (s v3)) (add (add (add (s (add zero (s (s (s (add (s v3) v1)))))) v3) (s v2)) (add v5 (add v7 (s (s v0)))))))) (s (s v6)))))))))
(check-sat)
