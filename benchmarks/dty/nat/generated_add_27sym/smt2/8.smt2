(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat)) (= (s (s (s (add (s (add (add (add (add (s v1) v8) (s v5)) (add (s v4) v7)) (add (add (s v3) v2) (s (add v8 (add v0 (s v7))))))) (s (s (add (s v5) (s (s v6))))))))) (s (s (s (s (add (s (s (add (s v5) (add (s (add (s (add (s v8) v3)) (s (s (add (s (add v0 v6)) (add (s v4) (add v1 v7))))))) (add (add v2 (s v8)) v7))))) v5)))))))))
(check-sat)
