(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat) (v10 nat) (v11 nat) (v12 nat)) (= (add (add (add (s v4) (add (s v5) v8)) (s (add (s v10) (s (add (add (s v1) v11) v9))))) (add (s (add (s v7) (add v0 (add v2 (s v3))))) (add (s v10) (s (add v6 (s (s v12))))))) (s (s (add (s v9) (add (add (add (s (s (s v3))) (add v4 (add (add (s v10) (add (add (add (add (s (s v5)) v0) (add (s (add v11 (s v12))) (s v7))) v1) v8)) v10))) v6) (s v2)))))))))
(check-sat)
