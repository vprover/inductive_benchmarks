(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat)) (= (s (s (s (add (add (add (add v0 (s (add v6 (s (s (s v2)))))) (add (s v3) (s v1))) (add (add (s v7) v8) (s (s (s (s (add v5 (s v4)))))))) (s (s v9)))))) (s (add v1 (s (add (add (s (s (s v5))) (add (s (s v7)) v3)) (s (add (add v9 (s (s (add (add (s v2) (s (add v4 v8))) (s (s (s v6))))))) (s (s v0))))))))))))
(check-sat)
