(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat) (v10 nat) (v11 nat)) (= (add (s (add (add (s v7) v10) (s (add (s v1) (s (s v4)))))) (add (s v9) (add (s v6) (s (add (s (s (s (add (add v2 (add (s v5) v8)) v3)))) (add (add v1 (s v0)) v11)))))) (s (s (add v8 (add (s (s (add (s (s (s (add v5 v6)))) (add (s (s v9)) (add (add (s (add (s (add v1 v1)) v0)) (add v2 v4)) (add (s (s v11)) (s v10))))))) (add v3 v7)))))))))
(check-sat)
