(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat)) (= (add (s v1) (s (add (s (s (s (add (s (add v3 (s v0))) (s v5))))) (s (add (add (add v4 (s v9)) (add (s (add (add (s v7) v2) v1)) (s v6))) (add (s v8) (s v6))))))) (s (add (add v6 v0) (s (s (add (add (add (s (add (s (s (s (add (s (add (s v9) (s (add (s v1) (s (s (s v8))))))) (add v6 v5))))) v1)) (s v7)) v3) (add v4 v2))))))))))
(check-sat)
