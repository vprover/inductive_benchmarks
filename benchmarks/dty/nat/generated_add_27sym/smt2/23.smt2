(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat) (v10 nat) (v11 nat)) (= (s (s (add (s (add (add (s (add (add (add (s v0) v1) v8) (s (add (s v11) v9)))) (add (s v6) v1)) (add (add (add (s v8) (s v10)) (add (s v4) v2)) (add v3 (s v7))))) (s v5)))) (s (add (add (s (s (add v2 (s (s (s (add (add (add (add v1 (s (s (add v7 v6)))) v8) (add (s (s (add v4 v1))) (s (add v8 (add v3 (add (s (s v9)) v10)))))) v11))))))) v5) v0))))))
(check-sat)
