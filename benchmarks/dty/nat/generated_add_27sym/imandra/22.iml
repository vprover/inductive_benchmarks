#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((add (add (add (add (S((add (add (add (S((S(Zero)))) v6) (add (S(v2)) (S(Zero)))) (S((S((S(v7))))))))) (S((S((add v5 (S(v3)))))))) (S(v4))) (add (S(v6)) (S(v5)))) (add v1 (S(v0)))) = (S((add (add v3 (add (add (add v6 (S((S(v7))))) (S((add (S(v1)) (add v5 v0))))) (S((S(Zero)))))) (add Zero (S((add (S(v6)) (S((add (S((S(v4)))) (add v5 (S((S((S(v2))))))))))))))))))             ) [@@auto]
;;
