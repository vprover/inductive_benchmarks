#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((add (S((add (S((S(v3)))) (S(v2))))) (S((S((S((add (S((S((S((S((S((add (S((S(v5)))) (S((add (add v4 (S(v0))) v1)))))))))))))) (add (add v6 (S(v7))) (S(v3))))))))))) = (S((add (add (S(v3)) (S((S(v2))))) (add (S((S((S((add (S((S((S((add v5 (S(v0))))))))) (S((add (add (S(v3)) v6) (S(v7)))))))))))) (S((add (S((S((S(v1)))))) v4))))))))             ) [@@auto]
;;
