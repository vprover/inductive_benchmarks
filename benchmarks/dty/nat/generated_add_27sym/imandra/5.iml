#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 -> ((add (S((S((S((S((S((S((S((add (S((S((S((S((add (S(v0)) (S(v1))))))))))) (S((add (S((add v5 (S((S(v4))))))) (S((add v0 (S(v2))))))))))))))))))))))) (S(v3))) = (add (S((S((S(v0)))))) (add (S((add (S((S((S(v4)))))) (add (S((S((S((S(v0)))))))) (S(v1)))))) (add (add (S((S((S((S((S((S((S(v3)))))))))))))) v2) (S(v5))))))             ) [@@auto]
;;
