(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat)) (= (add (s (add v5 (s (add v4 (s (s v6)))))) (s (add (add (add v1 (s (s v3))) (s (add (s (s v8)) (add (s (s v8)) v0)))) (s (add (add (s v7) (s v5)) (s v2)))))) (add (s (s (add (s (add (add (add (add v5 (add (s (add (s v0) v7)) (s (s (add (s (s v5)) (s v3)))))) (s (s (s v1)))) v8) v4)) (s (s v6))))) (add v2 (s v8)))))))
(check-sat)
