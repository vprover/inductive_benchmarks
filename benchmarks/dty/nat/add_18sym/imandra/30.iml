#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 -> ((add (add (add (S((add v5 (S(v3))))) (S((add v2 (S(v3)))))) (S((S((add v0 (add v6 (S(v4))))))))) (add (add (S(Zero)) v1) v6)) = (add (add (add v0 (S(v3))) v3) (add (S((S((add v2 (S(v6))))))) (add (add (add v4 (S((add v5 v1)))) (S(Zero))) (S((S(v6))))))))             ) [@@auto]
;;
