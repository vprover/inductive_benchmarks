(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat)) (= (add (s (add (s (add v2 (add (s v8) v6))) (s (s (s (add (add v4 (s v2)) (s v7))))))) (s (add v1 (s (add (add (s v5) (add v3 (s (s (s (s (add (add v0 (s v0)) v0))))))) (s v8)))))) (s (add (add (s (add (add v0 (s (s (s (add (s v2) (s (s (s (s v4))))))))) (add (add v5 v3) v6))) v0) (s (s (s (s (add v0 (add (add (add v8 (add v2 (s v1))) (s (s v7))) v8))))))))))))
(check-sat)
