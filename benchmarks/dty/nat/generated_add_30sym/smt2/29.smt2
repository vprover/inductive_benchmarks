(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat)) (= (s (s (s (add (add (s (add (s zero) (add (s v1) (s (add (add (s v6) (s v4)) (s (add (add v8 (s v7)) (add (s (s v5)) (s v6))))))))) (add v6 (add (s (s v2)) v4))) (add v3 (s v0)))))) (add (s (add (add (s (add v6 (s (add v8 (add (s (s (add (s (s v4)) (add (s v6) (s zero))))) v6))))) v4) (add (s (s (add v2 v7))) (s (s (s (s (add (s v3) (s v0))))))))) (add v1 v5))))))
(check-sat)
