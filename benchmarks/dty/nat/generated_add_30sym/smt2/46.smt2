(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat)) (= (add (add (s (s v9)) (s v5)) (s (s (add (add (add (s (add (s v3) (s v4))) (s (s v8))) (s (s (add (s v7) (add (add zero (s v7)) (s v0)))))) (add v6 (add (s v1) (s (s v2)))))))) (s (add v3 (s (s (add (s v6) (add (s (add v7 (add v2 (s (s (s (s v4))))))) (s (s (s (add (s v9) (s (add (add v0 v5) (add (s v8) (add (s (add (s v1) v7)) (s zero)))))))))))))))))))
(check-sat)
