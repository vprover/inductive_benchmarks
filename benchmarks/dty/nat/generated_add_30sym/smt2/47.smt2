(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat) (v10 nat) (v11 nat)) (= (s (add (s (add (add (add (s (s v1)) v9) (s v10)) (s (s v9)))) (add (s (s (add (add (s v6) (add (s (add v8 (add v4 (s v3)))) (s (add (s (s v7)) (add v0 (add (s v2) v6)))))) v5))) v11))) (s (s (s (add (add v10 (add (add (add (s (add v9 (add v1 (s v0)))) (add v6 v8)) v2) (s (s (add (s v6) (add (s (add v11 (s v3))) v7)))))) (s (s (s (add v5 (add (s (s v4)) (s v9))))))))))))))
(check-sat)
