(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(non-erasing add 2)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat) (v10 nat) (v11 nat)) (= (s (s (s (s (add (add (s v7) v10) (add (add (s v1) (s (s (add (s (s (add (s v6) (add (s (s v5)) v3)))) (add (s v8) (add (s (add v2 (s v11))) v0)))))) (add v6 (add (s v9) v4)))))))) (add (add (add (s (s (s (s v3)))) v1) v6) (s (add (s (s (add (add v5 (s (s (add (add (add (s v6) v0) (s (add (s v11) v4))) (s v8))))) (s (s (add v10 (s (add (s v9) v7)))))))) v2)))))))
(check-sat)
