(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(injective add (true true))
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat) (v10 nat)) (= (add (s v1) (add (add (s v3) (s (s (s v8)))) (s (add (add (s v4) (add (s (s (add (add (s v10) (add (s v0) (add (s v2) (add v5 (s v2))))) v6))) (add (s v2) (s v9)))) (s (s v7)))))) (add (add (add (s (add (s (s (s (s v6)))) v2)) v7) (s (add (add v2 v8) (add (s (s (add (add (s (add (s v10) (s (s (s v5))))) v0) (s (add (s v2) v9))))) v4)))) (s (add (s v3) v1)))))))
(check-sat)
