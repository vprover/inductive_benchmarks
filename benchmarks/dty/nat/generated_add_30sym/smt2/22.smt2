(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat)) (= (add (s (s (add (s (s (add (s (add (add v1 (s v4)) v3)) (s v8)))) v5))) (s (add (s (add v9 (s (add v8 (add (s (s v2)) (add v0 (s (s v9)))))))) (s (add (s (s v7)) (s v6)))))) (s (add (add (s v0) (s (s (s v1)))) (s (add (add (add v4 (add (s (add (add v9 v5) v8)) (s v9))) v3) (s (add (s (s (s (s v8)))) (s (add (s (add (s (s v6)) v7)) (s v2)))))))))))))
(check-sat)
