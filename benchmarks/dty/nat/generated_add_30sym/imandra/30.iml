#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (S((add (S(v0)) (S((S((S((add (S(v7)) v4)))))))))) (S((add (add (S(v1)) v8) (add (S((add (S((add (S(v3)) (add v2 (S((S(v5)))))))) (S((S(v9))))))) (S((S((S((S((S(v6))))))))))))))) = (add (S((add (S((S((S((add (S(v6)) (S((add (S((S((S((add (add (S((add v5 v8))) v4) (add v2 (S((S((S(v1)))))))))))))) (S((S((S(v9)))))))))))))))) (S((S((S((add v7 (S(v3)))))))))))) v0))             ) [@@auto]
;;
