data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (forall(V10:nat). (forall(V11:nat). (add (s (s (add (s (s (s (s V4)))) (s (add (s V5) V6))))) (add (add (add (add V11 (s V8)) (s (add (add V7 (s V11)) V1))) (add (s (s V1)) V10)) (add (s (add V9 (add V3 (s V2)))) (s V0)))) = (add (add (add (add (add (s (add V4 (s (s (s V7))))) (s (s V5))) (s (add V1 (s (add (s V6) V8))))) (add V1 (add (s V11) (add V11 (s (s V0)))))) (add V10 (s (s (s V9))))) (add V2 (s V3))))))))))))))).
