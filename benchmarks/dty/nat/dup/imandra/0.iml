#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec dup a0 = match (a0) with
  | (Zero) -> Zero
  | ((S(x))) -> (S(S(dup x)))



;;

verify(        fun x -> ((dup x) = (add x x))             ) [@@auto]
;;
