data nat := 
  | zero 
  | s nat.
data lst := 
  | nil 
  | cons nat lst.
data tree := 
  | Nil 
  | node tree nat tree.
val app : lst -> lst -> lst.
val flatten0 : tree -> lst.
assert (forall(R:lst). (app nil R) = R).
assert (forall(A:nat). (forall(L:lst). (forall(R:lst). (app (cons A L) R) = (cons A (app L R))))).
assert (flatten0 Nil) = nil.
assert (forall(P:tree). (forall(X:nat). (forall(Q:tree). (flatten0 (node P X Q)) = (app (flatten0 P) (cons X (flatten0 Q)))))).
goal   (forall(P:tree). (forall(Q:tree). (forall(R:tree). (forall(X:nat). (forall(Y:nat). (flatten0 (node (node P X Q) Y R)) = (flatten0 (node P X (node Q Y R)))))))).
