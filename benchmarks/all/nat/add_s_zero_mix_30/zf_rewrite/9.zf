data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (forall(V10:nat). (forall(V11:nat). (add (s (add (add (add (add (s (add V5 (s V9))) V7) V2) (add (add (s zero) V10) (s V4))) (add (s (s V6)) (s V0)))) (s (add (s (s (s (add (s V11) V1)))) (s (add (s V11) (add V8 (s V3))))))) = (add (s (add (s (s (add V3 (add V10 (add (add (add (s (s V1)) (s (add (s (add V6 (s (s (add (s (s (s V2))) (add V8 V4)))))) V11))) V0) (s (add (s zero) (s (s (add V7 V9)))))))))) V5)) V11))))))))))))).
