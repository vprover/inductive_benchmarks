data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (s (s (add (s (add (s (s (add V3 (add (s V8) V0)))) (add (s V1) V6))) (s (s (s (add (s V4) (s (s (add (s (s (add (add (add V2 (s V8)) (s V5)) V7))) (s (s V8)))))))))))) = (s (add V4 (s (add V3 (s (add (s V0) (add V6 (s (add (add V8 (s (s (s (add (add V7 V8) (add (s (s V5)) (s (s (s (s (s (s (add (s V1) V2))))))))))))) (s (s V8)))))))))))))))))))).
