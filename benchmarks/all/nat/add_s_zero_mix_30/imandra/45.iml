#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 -> ((S((S((S((S((add (add (S(v7)) v10) (add (add (S(v1)) (S((S((add (S((S((add (S(v6)) (add (S((S(v5)))) v3)))))) (add (S(v8)) (add (S((add v2 (S(v11))))) v0)))))))) (add v6 (add (S(v9)) v4)))))))))))) = (add (add (add (S((S((S((S(v3)))))))) v1) v6) (S((add (S((S((add (add v5 (S((S((add (add (add (S(v6)) v0) (S((add (S(v11)) v4)))) (S(v8)))))))) (S((S((add v10 (S((add (S(v9)) v7))))))))))))) v2)))))             ) [@@auto]
;;
