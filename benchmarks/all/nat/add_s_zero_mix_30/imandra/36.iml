#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (add (add (S((S(v8)))) (S((S(v7))))) (S((S((add (S(v6)) v3)))))) (add (add v6 (S(Zero))) (add (add (S((S((S(v4)))))) (add (S((S((add (S(v3)) (S(v2))))))) (S(v5)))) (add (S(v1)) (S(v0)))))) = (S((add (add (add (S((add (add (S((S(v4)))) (S((add (add (S(v6)) (S(v6))) (S((S((add (add (S(v0)) v1) v8))))))))) (S((S(v3))))))) Zero) (S((S((S(v5))))))) (S((add v3 (S((S((add v7 v2))))))))))))             ) [@@auto]
;;
