#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (add (S((add (add (S(v6)) (S((S((S(v5))))))) (add (add (S(Zero)) (S(v0))) (add v3 (S((S((S(v4))))))))))) (S((add (add (S((S(v7)))) (S(v2))) (add v7 (S(v0))))))) (S((add (S(v8)) (S(v1)))))) = (add (add (S((S(v7)))) (S((S((S((add (S((add v8 (S((add (add v5 (add v0 (add v7 v2))) v1)))))) (S((S((S((add v3 (add (S((add (S((S((S(v4)))))) (S(v0))))) (S((S(v6)))))))))))))))))))) (S(Zero))))             ) [@@auto]
;;
