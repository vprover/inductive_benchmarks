#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (add (S(v1)) v4) (S((S((add (S((add (S((S(v2)))) v7))) (S((S((add (S((S((add (S((S((S((add v6 (S((add (S(v0)) v5)))))))))) (S((S((S((add (S(v3)) v6)))))))))))) (S(v8))))))))))))) = (S((add (add (S(v6)) (S((S((add (S((S((add (add (S((S((S((S((S(v0)))))))))) (S(v5))) (add v2 v7)))))) (S((S((add (add (S((S(v1)))) v6) (add (S((S(v8)))) (S((S(v3)))))))))))))))) v4))))             ) [@@auto]
;;
