#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((S((add (add (add (S(v7)) v8) (add (S(v6)) (S(v3)))) (add (S((S((S((add v4 (S((S((S(v2))))))))))))) (add (add (S((S((S(v5)))))) (S(v1))) (S((add (add (add (S(v0)) v2) (S(v5))) (S(Zero)))))))))) = (add (add Zero (S((S((add (add v5 (S((S((S((S((S((S((add v0 (S((S((add (S(v4)) (S((S(v2))))))))))))))))))))))) (add v8 (S(v5))))))))) (add (add (S(v2)) (add (S((add v6 (S(v1))))) (S(v3)))) v7)))             ) [@@auto]
;;
