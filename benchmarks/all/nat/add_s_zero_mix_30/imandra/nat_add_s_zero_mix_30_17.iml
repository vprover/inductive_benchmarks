#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (add (S((add (S((S((S(v3)))))) (add v0 (S(v9)))))) v5) (add (S((S((add (S((S(v2)))) (S((S((S((S((S((add (add (S(v4)) (S(v6))) (add v1 (S(v0))))))))))))))))))) (S((add (S(v8)) v7))))) = (add (add (S((add v2 (S((S(v0))))))) (S((S((add (S((S(v6)))) (S((add v4 (S(v8))))))))))) (S((S((S((add (add v7 (S(v0))) (S((add v5 (add (S((add (S(v9)) (S(v1))))) (S((S(v3)))))))))))))))))             ) [@@auto]
;;
