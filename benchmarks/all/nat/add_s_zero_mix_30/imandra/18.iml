#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (S((S((S((add (add (S(v7)) (S((add v0 (add (S(v1)) v5))))) v8))))))) (add (S((S((S((S((S(v6)))))))))) (S((add (add (S((add (S(v3)) v4))) (S(Zero))) (S((add (S((S(v2)))) (S(v4)))))))))) = (add (S((add (S((S((add v4 v1))))) (S((S((S((S((add v2 (S((add (S((add (S((S((add (S((add (S(v4)) v6))) (S(v8))))))) (add (S(v7)) (S((add v5 (S((S(Zero))))))))))) v3))))))))))))))) (S(v0))))             ) [@@auto]
;;
