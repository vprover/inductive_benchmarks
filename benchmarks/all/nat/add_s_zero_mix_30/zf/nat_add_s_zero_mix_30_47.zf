data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (forall(V9:nat). (forall(V10:nat). (forall(V11:nat). (s (add (s (add (add (add (s (s V1)) V9) (s V10)) (s (s V9)))) (add (s (s (add (add (s V6) (add (s (add V8 (add V4 (s V3)))) (s (add (s (s V7)) (add V0 (add (s V2) V6)))))) V5))) V11))) = (s (s (s (add (add V10 (add (add (add (s (add V9 (add V1 (s V0)))) (add V6 V8)) V2) (s (s (add (s V6) (add (s (add V11 (s V3))) V7)))))) (s (s (s (add V5 (add (s (s V4)) (s V9)))))))))))))))))))))).
