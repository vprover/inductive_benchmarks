data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val even : nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (even zero).
assert (~(even (s zero))).
assert (forall(Y:nat). (even (s (s Y))) <=> (even Y)).
goal   (forall(X:nat). (forall(Y:nat). (((even X) && (even Y)) => (even (add X Y))))).
