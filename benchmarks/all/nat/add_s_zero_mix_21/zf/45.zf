data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (s (add (add (s (s (s V1))) (add V4 (s V2))) (add (add (add (s V0) V6) (add (s (add zero (s V3))) V5)) (add (s V2) (add (s V7) V0))))) = (add (add (add (s (s (add V0 (add V3 V1)))) (s (s V2))) (add (add (add (s V4) V7) (add V5 (s (s (add V6 (s V2)))))) (s (s zero)))) V0))))))))).
