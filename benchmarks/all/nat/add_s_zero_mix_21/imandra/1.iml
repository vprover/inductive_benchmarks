#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((S((add (add (S((S((add (S(v6)) (add (add (S(v0)) v5) (S(v7)))))))) (add (add (S((add (S(v3)) v2))) (S(v7))) v4)) (add v6 (S((S(v1)))))))) = (S((S((add (add v6 (S((add v0 (add (add v7 (S((S((add v3 v2)))))) (S((S((add (add (add v7 (S((S((S(v4))))))) (S(v5))) v1)))))))))) v6))))))             ) [@@auto]
;;
