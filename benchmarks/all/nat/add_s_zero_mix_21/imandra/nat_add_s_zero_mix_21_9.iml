#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((S((S((S((add (add (add (S(v8)) v0) (S((S((add (add (S(v1)) (S((S(v4))))) v3)))))) (S((add (S(v2)) (add v7 (add v6 (S(v5)))))))))))))) = (add v8 (add (add (add (S(v1)) (add v7 (S((S((S((add (S(v6)) (S(v0))))))))))) (add v4 (S(v3)))) (S((add v5 (S((S((S((S(v2))))))))))))))             ) [@@auto]
;;
