#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 -> ((add (S((add (S(v5)) (S((add (add (S(v2)) v1) (add (S(v3)) Zero))))))) (add (add v5 (S(v4))) (add Zero (S((S((add (S(v0)) (S((S(Zero)))))))))))) = (S((add (add (add Zero (S(Zero))) (S((S((S((add (add (add (add v1 (S((add (S((S((add (S(v0)) (S((S(v5))))))))) v5)))) Zero) v2) v3)))))))) v4))))             ) [@@auto]
;;
