#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((S((S((add (add (add (S(v6)) (S(v7))) (S((add v4 (S((add v1 (S(v2))))))))) (add (S((S(v3)))) (S((S((add v6 (add (S(v0)) v5)))))))))))) = (S((S((add (add v0 (add (add (S((S(v1)))) (add (add (S(v2)) (add (S((add v3 (S((S(v6))))))) (S((S((S(v4)))))))) (S(v6)))) v5)) v7))))))             ) [@@auto]
;;
