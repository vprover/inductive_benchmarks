(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat) (v10 nat) (v11 nat) (v12 nat)) (= (add (s (s (add (add (s (add v9 (add (s v10) v4))) (s (add (add (s v2) v11) (add v7 (s v3))))) (s (s (add v1 (add (add v8 (s v12)) v0))))))) (add (s v5) v6)) (s (add (add (s (s (add (add (add (s (add (add v4 (add v3 (s v10))) v0)) (s v11)) v9) (add (s v6) (add (add v2 v5) v7))))) (s (s (add (s v12) v1)))) (s v8)))))))
(check-sat)
