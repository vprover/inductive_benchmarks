(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat)) (= (s (add (add (s (add (s v3) (add (add (s v4) (add (s v6) v1)) (add (s (add v0 (s v3))) (add (s zero) v4))))) (add (s zero) zero)) (add (s v5) (s (s v2))))) (add (add zero (s (add (add (s (add v4 v6)) (s (s (s v1)))) (add (add zero v5) v4)))) (add (s (s (add v3 (s (s (add (s zero) (s (add (s v2) v3)))))))) v0))))))
(check-sat)
