data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (add (add (add (add V5 (s V4)) (s (s (s (s zero))))) (s (add (add V2 (s V1)) (add V6 (s (s V0)))))) (s (s (add (add V0 (add (s V7) zero)) (s V3))))) = (add (s (s (add V4 (s (s (add (s (s V0)) (s V7))))))) (add V1 (add (add V0 (s V3)) (s (s (add V6 (add (s zero) (s (add (s (add zero V5)) V2))))))))))))))))).
