data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (s (s (s (add (add (s V2) (s (add (s V8) (add (s (s (s (add V4 (add V3 (s V7)))))) (add (add (s V0) V7) (add (s V6) V1)))))) (s (s V5)))))) = (add V6 (s (add (add (s (s (add V7 V7))) (s (s (s (add (s (add (s (add (s V3) (s V1))) (s V0))) (add (add V4 (s (s V2))) V8)))))) (s V5))))))))))))).
