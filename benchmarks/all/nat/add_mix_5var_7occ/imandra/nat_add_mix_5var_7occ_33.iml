#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 -> ((add (add (add v2 (add v4 (add v3 v0))) (add v3 v0)) v1) = (add (add (add v2 (add v0 v1)) v3) (add v3 (add v4 v0))))             ) [@@auto]
;;
