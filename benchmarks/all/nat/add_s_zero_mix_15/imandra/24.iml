#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 -> ((S((add (S((add v2 (add (S(v1)) v0)))) (add (S((add (add (S(Zero)) v3) (S(v4))))) (add (S(v5)) v6))))) = (add (add (add (S((add (add v1 (S((S((add v2 v3)))))) (S(v0))))) (S((S(v6))))) (add v4 Zero)) (S(v5))))             ) [@@auto]
;;
