#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 -> ((add (S((S(v1)))) (add (S((add (S(v2)) (add (S(v1)) (add (S((S(Zero)))) (S(v1))))))) (S(v0)))) = (S((add (add (S(v1)) (S((S(v1))))) (S((add (S((S((add v2 (S(Zero))))))) (S((add v1 v0))))))))))             ) [@@auto]
;;
