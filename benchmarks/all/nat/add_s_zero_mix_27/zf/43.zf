data nat := 
  | zero 
  | s nat.
val add : nat -> nat -> nat.
val leq : nat -> nat -> prop.
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (s (add (add (s (add (s V0) (s V7))) (s (add (add (s V2) (s (add (s V5) V4))) (add V1 (add (s (s (add (s V7) V3))) V4))))) (add (s (add (s V6) (s V8))) (s V5)))) = (s (add (add V8 (s (add (s (s V3)) (add V4 (s (s (s (add (add V0 (s V2)) (add (s V5) (s V5)))))))))) (add (s (s (s (add V6 V7)))) (s (add (add V7 V1) (s V4))))))))))))))).
