(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat) (v10 nat)) (= (add (s (s (add (s (s v2)) (s (s (add (s (add v4 (s (s v3)))) (add (s v10) (add v5 (add (s v9) v7))))))))) (s (s (add (add v1 (s v6)) (add (s v0) (s v8)))))) (add v5 (add (s (s (s (add (add (add (add v9 v6) v8) v0) (s (s v7)))))) (add (s (add (add (s v1) (s (add (s (s (s v10))) (s (s (s v4)))))) v3)) (s (s v2)))))))))
(check-sat)
