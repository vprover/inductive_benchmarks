(set-logic UFDT)
(declare-datatypes ((nat 0)) (((zero) (s (s0 nat)))))
(declare-fun add (nat nat) nat)
(declare-fun leq (nat nat) Bool)
(assert (forall ((y nat)) (= (add zero y) y)))
(assert (forall ((x nat) (y nat)) (= (add (s x) y) (s (add x y)))))
(assert (forall ((y nat)) (leq zero y)))
(assert (forall ((x nat)) (not (leq (s x) zero))))
(assert (forall ((x nat) (y nat)) (= (leq (s x) (s y)) (leq x y))))
(assert (not (forall ((v0 nat) (v1 nat) (v2 nat) (v3 nat) (v4 nat) (v5 nat) (v6 nat) (v7 nat) (v8 nat) (v9 nat)) (= (s (add (s (s (add (s (s (s (add (add (s v1) (add v6 (s (s v6)))) (s (s v7)))))) v4))) (add (s (s v0)) (s (add (add (add (s v8) v9) v2) (add v5 (s v3))))))) (add (s (s v0)) (s (add v6 (s (s (add (s (add (s (s (add v3 v7))) (add (add (s (s (s (add v8 (add v9 (s (add (s v4) v1))))))) (s v6)) (s v5)))) (s v2)))))))))))
(check-sat)
