#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 -> ((S((add (add (add (add (add (S(v8)) (add v5 (S(v1)))) v4) (S(v6))) (add (add (S(v0)) (S(v2))) (add (S(v7)) v9))) (S((S((S((add (S((add (add v7 (S(v10))) (S(v3))))) (S(Zero)))))))))))) = (add (S((add (add v2 (add (S((S((add v8 Zero))))) v10)) v7))) (add (S((S((add (add (add (S((S(v7)))) (S((add v6 (S((add v1 v3))))))) (S((S((S((add v9 v5)))))))) (S((S(v0))))))))) v4)))             ) [@@auto]
;;
