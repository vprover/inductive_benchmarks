#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((S((S((S((add (S((add (add (add (add (S(v1)) v8) (S(v5))) (add (S(v4)) v7)) (add (add (S(v3)) v2) (S((add v8 (add v0 (S(v7)))))))))) (S((S((add (S(v5)) (S((S(v6)))))))))))))))) = (S((S((S((S((add (S((S((add (S(v5)) (add (S((add (S((add (S(v8)) v3))) (S((S((add (S((add v0 v6))) (add (S(v4)) (add v1 v7)))))))))) (add (add v2 (S(v8))) v7))))))) v5))))))))))             ) [@@auto]
;;
