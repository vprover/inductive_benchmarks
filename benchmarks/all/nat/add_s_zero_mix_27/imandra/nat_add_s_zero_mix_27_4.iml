#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (add (add v7 (S(v4))) (add (add (add (S((S(v3)))) (S((add (S(v0)) v1)))) (add v9 (S(v1)))) (S((add (S(v1)) (add (S(v5)) (S(v6)))))))) (S((S((S((S((add (S(v8)) v2)))))))))) = (S((S((add (add (add (S(v1)) (add (S((S((add (S(v2)) (S((add v4 (S(v1)))))))))) (S(v6)))) (S((S((S((add (add (S((S((add (S((add v8 (add v7 v0)))) v9))))) v3) v5)))))))) v1))))))             ) [@@auto]
;;
