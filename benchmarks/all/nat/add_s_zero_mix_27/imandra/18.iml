#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 -> ((add (S((S((add (S((S((S((add (S(v6)) (S((add (add (S((S(v3)))) (S(v2))) v4)))))))))) (add (S((add v7 (S((S((S(v0))))))))) (S(v1)))))))) (add (add v9 (add (S(v8)) v5)) v3)) = (add (add (add (S((add (S((S((S((S((S((add v2 (S(v9))))))))))))) (S((add v7 (add (S((S((S((add v0 v3))))))) (S((S(v1))))))))))) (S(v4))) (add v8 v3)) (S((add v6 (S(v5)))))))             ) [@@auto]
;;
