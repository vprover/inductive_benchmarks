#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 -> ((add (S((add (S(v7)) (S((add (S((add (S(v3)) (S((S((S(v8))))))))) (S((add v1 (add v4 (S(v5)))))))))))) (S((S((add (S(Zero)) (S((add (add v0 (S((S(v6))))) (S(v2))))))))))) = (add (S((add (S(v7)) (S((S((S(v0))))))))) (S((add (S((add Zero (S(v8))))) (add (S((S((S((S(v3)))))))) (S((add v2 (S((add (S((S(v4)))) (S((add (add v6 v5) v1)))))))))))))))             ) [@@auto]
;;
