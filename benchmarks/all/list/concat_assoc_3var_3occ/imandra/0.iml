#logic               ;;


type nat = Zero | S of nat
type lst = Nil | Cons of nat * lst


let rec app a0 a1 = match (a0, a1) with
  | (Nil, r) -> r
  | ((Cons(a, l)), r) -> (Cons(a, (app l r)))



;;

verify(        fun x y z -> ((app x (app y z)) = (app (app x y) z))             ) [@@auto]
;;
