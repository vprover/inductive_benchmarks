#logic               ;;


type nat = Zero | S of nat
type lst = Nil | Cons of nat * lst


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec app a0 a1 = match (a0, a1) with
  | (Nil, r) -> r
  | ((Cons(a, l)), r) -> (Cons(a, (app l r)))



;;

verify(        fun n x -> ((app (Cons((add n (S(n))), x)) (app x x)) = (app (app (Cons((add (S(n)) n), x)) x) x))             ) [@@auto]
;;
