data nat := 
  | zero 
  | s nat.
data lst := 
  | nil 
  | cons nat lst.
def app : lst -> lst -> lst where
(forall(R:lst). (app nil R) = R);
(forall(A:nat). (forall(L:lst). (forall(R:lst). (app (cons A L) R) = (cons A (app L R))))).
assert (forall(R:lst). (app nil R) = R).
assert (forall(A:nat). (forall(L:lst). (forall(R:lst). (app (cons A L) R) = (cons A (app L R))))).
goal   (forall(X:lst). (forall(Y:lst). (app X (app Y (app X X))) = (app (app X Y) (app X X)))).
