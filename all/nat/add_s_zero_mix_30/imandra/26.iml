#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 -> ((S((add (S((add (S((S((add (S(v1)) (add (S((S((add (S((S(v4)))) (S((S(v7))))))))) (S(v5)))))))) (add (S(v6)) v0)))) (S((S((add (S((S((S((S((S(v2)))))))))) (add v2 (S(v3))))))))))) = (add (add (S((S((S((S((S(v7)))))))))) (add v5 (S((add (add (add (S((S((S((S((S((S(v3)))))))))))) (S((S(v4))))) v6) (S(v2))))))) (S((S((add v1 (add (S((S((S(v2)))))) (S(v0))))))))))             ) [@@auto]
;;
