#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 -> ((add (S((add (add (add (add (S((add v5 (S(v9))))) v7) v2) (add (add (S(Zero)) v10) (S(v4)))) (add (S((S(v6)))) (S(v0)))))) (S((add (S((S((S((add (S(v11)) v1))))))) (S((add (S(v11)) (add v8 (S(v3)))))))))) = (add (S((add (S((S((add v3 (add v10 (add (add (add (S((S(v1)))) (S((add (S((add v6 (S((S((add (S((S((S(v2)))))) (add v8 v4))))))))) v11)))) v0) (S((add (S(Zero)) (S((S((add v7 v9))))))))))))))) v5))) v11))             ) [@@auto]
;;
