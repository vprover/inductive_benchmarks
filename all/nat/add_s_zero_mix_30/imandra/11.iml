#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 -> ((add (add (S(v0)) (S((add (S((add (S((add (S(v10)) (add (S((S(v2)))) v7)))) (add (S((S((S(v6)))))) v4)))) (S((S((S((S((S(v3)))))))))))))) (add (S((S((add v5 (S(v9))))))) (add (S(v8)) v1))) = (add (S((S((S((add (add v4 v0) (S((S(v1))))))))))) (S((S((add (S((S((add (S((add v2 v6))) (add (S((S((S((S(v3)))))))) (S(v5)))))))) (add (S(v7)) (S((S((add (S(v9)) (add v10 v8))))))))))))))             ) [@@auto]
;;
