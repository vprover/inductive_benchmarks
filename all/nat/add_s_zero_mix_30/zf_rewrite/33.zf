data nat := 
  | zero 
  | s nat.
def add : nat -> nat -> nat where
(forall(Y:nat). (add zero Y) = Y);
(forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
def leq : nat -> nat -> prop where
(forall(Y:nat). (leq zero Y));
(forall(X:nat). ~((leq (s X) zero)));
(forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
assert (forall(Y:nat). (add zero Y) = Y).
assert (forall(X:nat). (forall(Y:nat). (add (s X) Y) = (s (add X Y)))).
assert (forall(Y:nat). (leq zero Y)).
assert (forall(X:nat). ~((leq (s X) zero))).
assert (forall(X:nat). (forall(Y:nat). ((leq (s X) (s Y)) <=> (leq X Y)))).
goal   (forall(V0:nat). (forall(V1:nat). (forall(V2:nat). (forall(V3:nat). (forall(V4:nat). (forall(V5:nat). (forall(V6:nat). (forall(V7:nat). (forall(V8:nat). (add (s (s (add (s V7) (add (s (s V4)) (s (s (s V7))))))) (add (add V1 (s (s (add (s (add (add (s (add (s zero) V0)) (s V5)) (s (s V3)))) (add V6 (s V8)))))) (s (s V2)))) = (add (s (s (s V1))) (add (add (s (s (s (s (s (s V5)))))) (s V3)) (add (s (s (add (s (s (s V0))) (s (s (s (add zero (add (s V7) (add (add V2 V7) V4))))))))) (add V6 V8))))))))))))).
