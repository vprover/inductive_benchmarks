#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 -> ((add (S((S((S((add (S((add (S(v2)) (S(v4))))) v3))))))) (S((add (add v1 (add (S(v4)) (S(v1)))) (S((S(v0)))))))) = (S((S((add (S((S((S((S((S((S((S((add (add v2 (add (S((S((add v1 v1))))) v3)) v4))))))))))))))) (add v4 v0)))))))             ) [@@auto]
;;
