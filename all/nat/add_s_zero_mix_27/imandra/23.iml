#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))

let rec leq a0 a1 = match (a0, a1) with
  | (Zero, y) -> (not false)
  | ((S(x)), Zero) -> false
  | ((S(x)), (S(y))) -> (leq x y)



;;

verify(        fun v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 -> ((S((S((add (S((add (add (S((add (add (add (S(v0)) v1) v8) (S((add (S(v11)) v9)))))) (add (S(v6)) v1)) (add (add (add (S(v8)) (S(v10))) (add (S(v4)) v2)) (add v3 (S(v7))))))) (S(v5))))))) = (S((add (add (S((S((add v2 (S((S((S((add (add (add (add v1 (S((S((add v7 v6)))))) v8) (add (S((S((add v4 v1))))) (S((add v8 (add v3 (add (S((S(v9)))) v10))))))) v11)))))))))))) v5) v0))))             ) [@@auto]
;;
