#logic               ;;


type nat = Zero | S of nat


let rec add a0 a1 = match (a0, a1) with
  | (Zero, y) -> y
  | ((S(x)), y) -> (S((add x y)))



;;

verify(        fun x y z -> ((add x (add y z)) = (add (add x y) z))             ) [@@auto]
;;
